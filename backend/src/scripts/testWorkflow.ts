import prisma from '../utils/database';
import { BudgetRequestService } from '../services/budgetRequestService';

async function testWorkflow() {
  console.log('üß™ Test du workflow des demandes de budget...\n');

  try {
    // 1. V√©rifier les utilisateurs existants
    console.log('1. V√©rification des utilisateurs...');
    const users = await prisma.user.findMany({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        role: true,
        department: true,
      },
    });

    console.log(`   ${users.length} utilisateurs trouv√©s:`);
    users.forEach(user => {
      console.log(`   - ${user.firstName} ${user.lastName} (${user.email}) - ${user.role} - ${user.department || 'N/A'}`);
    });

    // 2. V√©rifier les demandes existantes
    console.log('\n2. V√©rification des demandes existantes...');
    const requests = await prisma.budgetRequest.findMany({
      include: {
        items: true,
        comments: true,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    console.log(`   ${requests.length} demandes trouv√©es:`);
    requests.forEach(request => {
      console.log(`   - ${request.title} (${request.status}) - ${request.department} - ${request.agentName} - ${request.amount}‚Ç¨`);
    });

    // 3. V√©rifier les d√©partements
    console.log('\n3. V√©rification des d√©partements...');
    const departments = await prisma.department.findMany();
    console.log(`   ${departments.length} d√©partements trouv√©s:`);
    departments.forEach(dept => {
      console.log(`   - ${dept.name} (${dept.code})`);
    });

    // 4. Tester la cr√©ation d'une nouvelle demande
    console.log('\n4. Test de cr√©ation d\'une nouvelle demande...');
    
    // Trouver un membre permanent
    const agent = users.find(u => u.role === 'membre_permanent');
    if (!agent) {
      console.log('   ‚ùå Aucun membre permanent trouv√©');
      return;
    }

    const testRequest = {
      agentId: agent.id,
      agentName: `${agent.firstName} ${agent.lastName}`,
      department: agent.department || 'G√©nie Informatique',
      category: '√âquipement',
      title: 'Test Workflow - Ordinateurs',
      description: 'Demande de test pour v√©rifier le workflow',
      amount: 5000,
      justification: 'Besoin d\'ordinateurs pour les √©tudiants',
      urgency: 'medium' as const,
      status: 'submitted' as const,
      items: [
        {
          description: 'Ordinateur portable',
          quantity: 2,
          unitPrice: 2500,
          totalPrice: 5000,
        },
      ],
    };

    const createResult = await BudgetRequestService.createRequest(testRequest);
    if (createResult.success) {
      console.log(`   ‚úÖ Demande cr√©√©e avec succ√®s: ${createResult.data?.id}`);
      console.log(`   Statut: ${createResult.data?.status}`);
    } else {
      console.log(`   ‚ùå Erreur lors de la cr√©ation: ${createResult.error}`);
    }

    // 5. Tester la validation par le chef de d√©partement
    console.log('\n5. Test de validation par le chef de d√©partement...');
    
    // Trouver un chef de d√©partement
    const chef = users.find(u => u.role === 'chef_departement' && u.department === agent.department);
    if (!chef) {
      console.log(`   ‚ùå Aucun chef de d√©partement trouv√© pour ${agent.department}`);
    } else {
      console.log(`   Chef trouv√©: ${chef.firstName} ${chef.lastName}`);
      
      // Trouver une demande soumise du d√©partement
      const submittedRequest = requests.find(r => r.status === 'submitted' && r.department === agent.department);
      if (submittedRequest) {
        console.log(`   Demande soumise trouv√©e: ${submittedRequest.id}`);
        
        // Tester l'approbation
        const approveResult = await BudgetRequestService.updateRequestStatus(
          submittedRequest.id,
          { status: 'chef_approved', comment: 'Test d\'approbation par le chef' },
          chef.id
        );
        
        if (approveResult.success) {
          console.log(`   ‚úÖ Demande approuv√©e par le chef: ${approveResult.data?.status}`);
        } else {
          console.log(`   ‚ùå Erreur lors de l'approbation: ${approveResult.error}`);
        }
      } else {
        console.log('   Aucune demande soumise trouv√©e pour ce d√©partement');
      }
    }

    // 6. Afficher le r√©sum√© final
    console.log('\n6. R√©sum√© final...');
    const finalRequests = await prisma.budgetRequest.findMany({
      orderBy: { createdAt: 'desc' },
    });

    console.log('   Statuts des demandes:');
    const statusCounts: Record<string, number> = {};
    finalRequests.forEach(request => {
      statusCounts[request.status] = (statusCounts[request.status] || 0) + 1;
    });

    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`   - ${status}: ${count}`);
    });

    console.log('\n‚úÖ Test du workflow termin√©');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testWorkflow();
}

export { testWorkflow }; 