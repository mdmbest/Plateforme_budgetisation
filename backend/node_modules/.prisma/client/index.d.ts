
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model BudgetRequest
 * 
 */
export type BudgetRequest = $Result.DefaultSelection<Prisma.$BudgetRequestPayload>
/**
 * Model RequestItem
 * 
 */
export type RequestItem = $Result.DefaultSelection<Prisma.$RequestItemPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model BudgetExecution
 * 
 */
export type BudgetExecution = $Result.DefaultSelection<Prisma.$BudgetExecutionPayload>
/**
 * Model OhadaAccount
 * 
 */
export type OhadaAccount = $Result.DefaultSelection<Prisma.$OhadaAccountPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  agent: 'agent',
  chef_departement: 'chef_departement',
  direction: 'direction',
  recteur: 'recteur',
  auditeur: 'auditeur',
  admin: 'admin'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UrgencyLevel: {
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical'
};

export type UrgencyLevel = (typeof UrgencyLevel)[keyof typeof UrgencyLevel]


export const RequestStatus: {
  draft: 'draft',
  submitted: 'submitted',
  chef_review: 'chef_review',
  chef_approved: 'chef_approved',
  chef_rejected: 'chef_rejected',
  direction_review: 'direction_review',
  direction_approved: 'direction_approved',
  direction_rejected: 'direction_rejected',
  recteur_review: 'recteur_review',
  recteur_approved: 'recteur_approved',
  recteur_rejected: 'recteur_rejected',
  executed: 'executed'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]


export const NotificationType: {
  info: 'info',
  warning: 'warning',
  error: 'error',
  success: 'success'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const ExecutionStatus: {
  pending: 'pending',
  paid: 'paid',
  cancelled: 'cancelled'
};

export type ExecutionStatus = (typeof ExecutionStatus)[keyof typeof ExecutionStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UrgencyLevel = $Enums.UrgencyLevel

export const UrgencyLevel: typeof $Enums.UrgencyLevel

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type ExecutionStatus = $Enums.ExecutionStatus

export const ExecutionStatus: typeof $Enums.ExecutionStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.budgetRequest`: Exposes CRUD operations for the **BudgetRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BudgetRequests
    * const budgetRequests = await prisma.budgetRequest.findMany()
    * ```
    */
  get budgetRequest(): Prisma.BudgetRequestDelegate<ExtArgs>;

  /**
   * `prisma.requestItem`: Exposes CRUD operations for the **RequestItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestItems
    * const requestItems = await prisma.requestItem.findMany()
    * ```
    */
  get requestItem(): Prisma.RequestItemDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.budgetExecution`: Exposes CRUD operations for the **BudgetExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BudgetExecutions
    * const budgetExecutions = await prisma.budgetExecution.findMany()
    * ```
    */
  get budgetExecution(): Prisma.BudgetExecutionDelegate<ExtArgs>;

  /**
   * `prisma.ohadaAccount`: Exposes CRUD operations for the **OhadaAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OhadaAccounts
    * const ohadaAccounts = await prisma.ohadaAccount.findMany()
    * ```
    */
  get ohadaAccount(): Prisma.OhadaAccountDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Department: 'Department',
    BudgetRequest: 'BudgetRequest',
    RequestItem: 'RequestItem',
    Comment: 'Comment',
    Notification: 'Notification',
    AuditLog: 'AuditLog',
    BudgetExecution: 'BudgetExecution',
    OhadaAccount: 'OhadaAccount'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "department" | "budgetRequest" | "requestItem" | "comment" | "notification" | "auditLog" | "budgetExecution" | "ohadaAccount"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      BudgetRequest: {
        payload: Prisma.$BudgetRequestPayload<ExtArgs>
        fields: Prisma.BudgetRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>
          }
          findFirst: {
            args: Prisma.BudgetRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>
          }
          findMany: {
            args: Prisma.BudgetRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>[]
          }
          create: {
            args: Prisma.BudgetRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>
          }
          createMany: {
            args: Prisma.BudgetRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BudgetRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>[]
          }
          delete: {
            args: Prisma.BudgetRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>
          }
          update: {
            args: Prisma.BudgetRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>
          }
          deleteMany: {
            args: Prisma.BudgetRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BudgetRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetRequestPayload>
          }
          aggregate: {
            args: Prisma.BudgetRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudgetRequest>
          }
          groupBy: {
            args: Prisma.BudgetRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.BudgetRequestCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetRequestCountAggregateOutputType> | number
          }
        }
      }
      RequestItem: {
        payload: Prisma.$RequestItemPayload<ExtArgs>
        fields: Prisma.RequestItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>
          }
          findFirst: {
            args: Prisma.RequestItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>
          }
          findMany: {
            args: Prisma.RequestItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>[]
          }
          create: {
            args: Prisma.RequestItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>
          }
          createMany: {
            args: Prisma.RequestItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>[]
          }
          delete: {
            args: Prisma.RequestItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>
          }
          update: {
            args: Prisma.RequestItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>
          }
          deleteMany: {
            args: Prisma.RequestItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RequestItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestItemPayload>
          }
          aggregate: {
            args: Prisma.RequestItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestItem>
          }
          groupBy: {
            args: Prisma.RequestItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestItemCountArgs<ExtArgs>
            result: $Utils.Optional<RequestItemCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      BudgetExecution: {
        payload: Prisma.$BudgetExecutionPayload<ExtArgs>
        fields: Prisma.BudgetExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>
          }
          findFirst: {
            args: Prisma.BudgetExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>
          }
          findMany: {
            args: Prisma.BudgetExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>[]
          }
          create: {
            args: Prisma.BudgetExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>
          }
          createMany: {
            args: Prisma.BudgetExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BudgetExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>[]
          }
          delete: {
            args: Prisma.BudgetExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>
          }
          update: {
            args: Prisma.BudgetExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>
          }
          deleteMany: {
            args: Prisma.BudgetExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BudgetExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetExecutionPayload>
          }
          aggregate: {
            args: Prisma.BudgetExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudgetExecution>
          }
          groupBy: {
            args: Prisma.BudgetExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.BudgetExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetExecutionCountAggregateOutputType> | number
          }
        }
      }
      OhadaAccount: {
        payload: Prisma.$OhadaAccountPayload<ExtArgs>
        fields: Prisma.OhadaAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OhadaAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OhadaAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>
          }
          findFirst: {
            args: Prisma.OhadaAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OhadaAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>
          }
          findMany: {
            args: Prisma.OhadaAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>[]
          }
          create: {
            args: Prisma.OhadaAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>
          }
          createMany: {
            args: Prisma.OhadaAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OhadaAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>[]
          }
          delete: {
            args: Prisma.OhadaAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>
          }
          update: {
            args: Prisma.OhadaAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>
          }
          deleteMany: {
            args: Prisma.OhadaAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OhadaAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OhadaAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OhadaAccountPayload>
          }
          aggregate: {
            args: Prisma.OhadaAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOhadaAccount>
          }
          groupBy: {
            args: Prisma.OhadaAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<OhadaAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.OhadaAccountCountArgs<ExtArgs>
            result: $Utils.Optional<OhadaAccountCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    budgetRequests: number
    validatedRequests: number
    comments: number
    notifications: number
    auditLogs: number
    departments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budgetRequests?: boolean | UserCountOutputTypeCountBudgetRequestsArgs
    validatedRequests?: boolean | UserCountOutputTypeCountValidatedRequestsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    departments?: boolean | UserCountOutputTypeCountDepartmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBudgetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountValidatedRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    requests: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requests?: boolean | DepartmentCountOutputTypeCountRequestsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetRequestWhereInput
  }


  /**
   * Count Type BudgetRequestCountOutputType
   */

  export type BudgetRequestCountOutputType = {
    comments: number
    items: number
    executions: number
  }

  export type BudgetRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | BudgetRequestCountOutputTypeCountCommentsArgs
    items?: boolean | BudgetRequestCountOutputTypeCountItemsArgs
    executions?: boolean | BudgetRequestCountOutputTypeCountExecutionsArgs
  }

  // Custom InputTypes
  /**
   * BudgetRequestCountOutputType without action
   */
  export type BudgetRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequestCountOutputType
     */
    select?: BudgetRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BudgetRequestCountOutputType without action
   */
  export type BudgetRequestCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * BudgetRequestCountOutputType without action
   */
  export type BudgetRequestCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestItemWhereInput
  }

  /**
   * BudgetRequestCountOutputType without action
   */
  export type BudgetRequestCountOutputTypeCountExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetExecutionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    role: $Enums.UserRole | null
    department: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    role: $Enums.UserRole | null
    department: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    password: number
    role: number
    department: number
    isActive: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    role?: true
    department?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    role?: true
    department?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    role?: true
    department?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    lastLogin: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    role?: boolean
    department?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    budgetRequests?: boolean | User$budgetRequestsArgs<ExtArgs>
    validatedRequests?: boolean | User$validatedRequestsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    departments?: boolean | User$departmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    role?: boolean
    department?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    role?: boolean
    department?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budgetRequests?: boolean | User$budgetRequestsArgs<ExtArgs>
    validatedRequests?: boolean | User$validatedRequestsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    departments?: boolean | User$departmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      budgetRequests: Prisma.$BudgetRequestPayload<ExtArgs>[]
      validatedRequests: Prisma.$BudgetRequestPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string
      lastName: string
      password: string
      role: $Enums.UserRole
      department: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      lastLogin: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    budgetRequests<T extends User$budgetRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$budgetRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findMany"> | Null>
    validatedRequests<T extends User$validatedRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$validatedRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    departments<T extends User$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly department: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.budgetRequests
   */
  export type User$budgetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    where?: BudgetRequestWhereInput
    orderBy?: BudgetRequestOrderByWithRelationInput | BudgetRequestOrderByWithRelationInput[]
    cursor?: BudgetRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetRequestScalarFieldEnum | BudgetRequestScalarFieldEnum[]
  }

  /**
   * User.validatedRequests
   */
  export type User$validatedRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    where?: BudgetRequestWhereInput
    orderBy?: BudgetRequestOrderByWithRelationInput | BudgetRequestOrderByWithRelationInput[]
    cursor?: BudgetRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetRequestScalarFieldEnum | BudgetRequestScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.departments
   */
  export type User$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    totalBudget: number | null
    usedBudget: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    totalBudget: number | null
    usedBudget: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    chefId: string | null
    totalBudget: number | null
    usedBudget: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    chefId: string | null
    totalBudget: number | null
    usedBudget: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    code: number
    chefId: number
    totalBudget: number
    usedBudget: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    totalBudget?: true
    usedBudget?: true
  }

  export type DepartmentSumAggregateInputType = {
    totalBudget?: true
    usedBudget?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    chefId?: true
    totalBudget?: true
    usedBudget?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    chefId?: true
    totalBudget?: true
    usedBudget?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    chefId?: true
    totalBudget?: true
    usedBudget?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    code: string
    chefId: string
    totalBudget: number
    usedBudget: number
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    chefId?: boolean
    totalBudget?: boolean
    usedBudget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chef?: boolean | UserDefaultArgs<ExtArgs>
    requests?: boolean | Department$requestsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    chefId?: boolean
    totalBudget?: boolean
    usedBudget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chef?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    chefId?: boolean
    totalBudget?: boolean
    usedBudget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chef?: boolean | UserDefaultArgs<ExtArgs>
    requests?: boolean | Department$requestsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chef?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      chef: Prisma.$UserPayload<ExtArgs>
      requests: Prisma.$BudgetRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      chefId: string
      totalBudget: number
      usedBudget: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chef<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    requests<T extends Department$requestsArgs<ExtArgs> = {}>(args?: Subset<T, Department$requestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly chefId: FieldRef<"Department", 'String'>
    readonly totalBudget: FieldRef<"Department", 'Float'>
    readonly usedBudget: FieldRef<"Department", 'Float'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department.requests
   */
  export type Department$requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    where?: BudgetRequestWhereInput
    orderBy?: BudgetRequestOrderByWithRelationInput | BudgetRequestOrderByWithRelationInput[]
    cursor?: BudgetRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetRequestScalarFieldEnum | BudgetRequestScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model BudgetRequest
   */

  export type AggregateBudgetRequest = {
    _count: BudgetRequestCountAggregateOutputType | null
    _avg: BudgetRequestAvgAggregateOutputType | null
    _sum: BudgetRequestSumAggregateOutputType | null
    _min: BudgetRequestMinAggregateOutputType | null
    _max: BudgetRequestMaxAggregateOutputType | null
  }

  export type BudgetRequestAvgAggregateOutputType = {
    amount: number | null
  }

  export type BudgetRequestSumAggregateOutputType = {
    amount: number | null
  }

  export type BudgetRequestMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    agentName: string | null
    department: string | null
    category: string | null
    title: string | null
    description: string | null
    amount: number | null
    justification: string | null
    accountCode: string | null
    urgency: $Enums.UrgencyLevel | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    validatedBy: string | null
    validatedAt: Date | null
  }

  export type BudgetRequestMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    agentName: string | null
    department: string | null
    category: string | null
    title: string | null
    description: string | null
    amount: number | null
    justification: string | null
    accountCode: string | null
    urgency: $Enums.UrgencyLevel | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    validatedBy: string | null
    validatedAt: Date | null
  }

  export type BudgetRequestCountAggregateOutputType = {
    id: number
    agentId: number
    agentName: number
    department: number
    category: number
    title: number
    description: number
    amount: number
    justification: number
    accountCode: number
    urgency: number
    attachments: number
    status: number
    createdAt: number
    updatedAt: number
    validatedBy: number
    validatedAt: number
    _all: number
  }


  export type BudgetRequestAvgAggregateInputType = {
    amount?: true
  }

  export type BudgetRequestSumAggregateInputType = {
    amount?: true
  }

  export type BudgetRequestMinAggregateInputType = {
    id?: true
    agentId?: true
    agentName?: true
    department?: true
    category?: true
    title?: true
    description?: true
    amount?: true
    justification?: true
    accountCode?: true
    urgency?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    validatedBy?: true
    validatedAt?: true
  }

  export type BudgetRequestMaxAggregateInputType = {
    id?: true
    agentId?: true
    agentName?: true
    department?: true
    category?: true
    title?: true
    description?: true
    amount?: true
    justification?: true
    accountCode?: true
    urgency?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    validatedBy?: true
    validatedAt?: true
  }

  export type BudgetRequestCountAggregateInputType = {
    id?: true
    agentId?: true
    agentName?: true
    department?: true
    category?: true
    title?: true
    description?: true
    amount?: true
    justification?: true
    accountCode?: true
    urgency?: true
    attachments?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    validatedBy?: true
    validatedAt?: true
    _all?: true
  }

  export type BudgetRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetRequest to aggregate.
     */
    where?: BudgetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetRequests to fetch.
     */
    orderBy?: BudgetRequestOrderByWithRelationInput | BudgetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BudgetRequests
    **/
    _count?: true | BudgetRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetRequestMaxAggregateInputType
  }

  export type GetBudgetRequestAggregateType<T extends BudgetRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateBudgetRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudgetRequest[P]>
      : GetScalarType<T[P], AggregateBudgetRequest[P]>
  }




  export type BudgetRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetRequestWhereInput
    orderBy?: BudgetRequestOrderByWithAggregationInput | BudgetRequestOrderByWithAggregationInput[]
    by: BudgetRequestScalarFieldEnum[] | BudgetRequestScalarFieldEnum
    having?: BudgetRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetRequestCountAggregateInputType | true
    _avg?: BudgetRequestAvgAggregateInputType
    _sum?: BudgetRequestSumAggregateInputType
    _min?: BudgetRequestMinAggregateInputType
    _max?: BudgetRequestMaxAggregateInputType
  }

  export type BudgetRequestGroupByOutputType = {
    id: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode: string | null
    urgency: $Enums.UrgencyLevel
    attachments: string[]
    status: $Enums.RequestStatus
    createdAt: Date
    updatedAt: Date
    validatedBy: string | null
    validatedAt: Date | null
    _count: BudgetRequestCountAggregateOutputType | null
    _avg: BudgetRequestAvgAggregateOutputType | null
    _sum: BudgetRequestSumAggregateOutputType | null
    _min: BudgetRequestMinAggregateOutputType | null
    _max: BudgetRequestMaxAggregateOutputType | null
  }

  type GetBudgetRequestGroupByPayload<T extends BudgetRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetRequestGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetRequestGroupByOutputType[P]>
        }
      >
    >


  export type BudgetRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    agentName?: boolean
    department?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    amount?: boolean
    justification?: boolean
    accountCode?: boolean
    urgency?: boolean
    attachments?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    validatedBy?: boolean
    validatedAt?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
    validator?: boolean | BudgetRequest$validatorArgs<ExtArgs>
    dept?: boolean | BudgetRequest$deptArgs<ExtArgs>
    comments?: boolean | BudgetRequest$commentsArgs<ExtArgs>
    items?: boolean | BudgetRequest$itemsArgs<ExtArgs>
    executions?: boolean | BudgetRequest$executionsArgs<ExtArgs>
    _count?: boolean | BudgetRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgetRequest"]>

  export type BudgetRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    agentName?: boolean
    department?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    amount?: boolean
    justification?: boolean
    accountCode?: boolean
    urgency?: boolean
    attachments?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    validatedBy?: boolean
    validatedAt?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
    validator?: boolean | BudgetRequest$validatorArgs<ExtArgs>
    dept?: boolean | BudgetRequest$deptArgs<ExtArgs>
  }, ExtArgs["result"]["budgetRequest"]>

  export type BudgetRequestSelectScalar = {
    id?: boolean
    agentId?: boolean
    agentName?: boolean
    department?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    amount?: boolean
    justification?: boolean
    accountCode?: boolean
    urgency?: boolean
    attachments?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    validatedBy?: boolean
    validatedAt?: boolean
  }

  export type BudgetRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
    validator?: boolean | BudgetRequest$validatorArgs<ExtArgs>
    dept?: boolean | BudgetRequest$deptArgs<ExtArgs>
    comments?: boolean | BudgetRequest$commentsArgs<ExtArgs>
    items?: boolean | BudgetRequest$itemsArgs<ExtArgs>
    executions?: boolean | BudgetRequest$executionsArgs<ExtArgs>
    _count?: boolean | BudgetRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BudgetRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
    validator?: boolean | BudgetRequest$validatorArgs<ExtArgs>
    dept?: boolean | BudgetRequest$deptArgs<ExtArgs>
  }

  export type $BudgetRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BudgetRequest"
    objects: {
      agent: Prisma.$UserPayload<ExtArgs>
      validator: Prisma.$UserPayload<ExtArgs> | null
      dept: Prisma.$DepartmentPayload<ExtArgs> | null
      comments: Prisma.$CommentPayload<ExtArgs>[]
      items: Prisma.$RequestItemPayload<ExtArgs>[]
      executions: Prisma.$BudgetExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      agentName: string
      department: string
      category: string
      title: string
      description: string
      amount: number
      justification: string
      accountCode: string | null
      urgency: $Enums.UrgencyLevel
      attachments: string[]
      status: $Enums.RequestStatus
      createdAt: Date
      updatedAt: Date
      validatedBy: string | null
      validatedAt: Date | null
    }, ExtArgs["result"]["budgetRequest"]>
    composites: {}
  }

  type BudgetRequestGetPayload<S extends boolean | null | undefined | BudgetRequestDefaultArgs> = $Result.GetResult<Prisma.$BudgetRequestPayload, S>

  type BudgetRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BudgetRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BudgetRequestCountAggregateInputType | true
    }

  export interface BudgetRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BudgetRequest'], meta: { name: 'BudgetRequest' } }
    /**
     * Find zero or one BudgetRequest that matches the filter.
     * @param {BudgetRequestFindUniqueArgs} args - Arguments to find a BudgetRequest
     * @example
     * // Get one BudgetRequest
     * const budgetRequest = await prisma.budgetRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetRequestFindUniqueArgs>(args: SelectSubset<T, BudgetRequestFindUniqueArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BudgetRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BudgetRequestFindUniqueOrThrowArgs} args - Arguments to find a BudgetRequest
     * @example
     * // Get one BudgetRequest
     * const budgetRequest = await prisma.budgetRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BudgetRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetRequestFindFirstArgs} args - Arguments to find a BudgetRequest
     * @example
     * // Get one BudgetRequest
     * const budgetRequest = await prisma.budgetRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetRequestFindFirstArgs>(args?: SelectSubset<T, BudgetRequestFindFirstArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BudgetRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetRequestFindFirstOrThrowArgs} args - Arguments to find a BudgetRequest
     * @example
     * // Get one BudgetRequest
     * const budgetRequest = await prisma.budgetRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BudgetRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BudgetRequests
     * const budgetRequests = await prisma.budgetRequest.findMany()
     * 
     * // Get first 10 BudgetRequests
     * const budgetRequests = await prisma.budgetRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetRequestWithIdOnly = await prisma.budgetRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetRequestFindManyArgs>(args?: SelectSubset<T, BudgetRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BudgetRequest.
     * @param {BudgetRequestCreateArgs} args - Arguments to create a BudgetRequest.
     * @example
     * // Create one BudgetRequest
     * const BudgetRequest = await prisma.budgetRequest.create({
     *   data: {
     *     // ... data to create a BudgetRequest
     *   }
     * })
     * 
     */
    create<T extends BudgetRequestCreateArgs>(args: SelectSubset<T, BudgetRequestCreateArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BudgetRequests.
     * @param {BudgetRequestCreateManyArgs} args - Arguments to create many BudgetRequests.
     * @example
     * // Create many BudgetRequests
     * const budgetRequest = await prisma.budgetRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetRequestCreateManyArgs>(args?: SelectSubset<T, BudgetRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BudgetRequests and returns the data saved in the database.
     * @param {BudgetRequestCreateManyAndReturnArgs} args - Arguments to create many BudgetRequests.
     * @example
     * // Create many BudgetRequests
     * const budgetRequest = await prisma.budgetRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BudgetRequests and only return the `id`
     * const budgetRequestWithIdOnly = await prisma.budgetRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BudgetRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, BudgetRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BudgetRequest.
     * @param {BudgetRequestDeleteArgs} args - Arguments to delete one BudgetRequest.
     * @example
     * // Delete one BudgetRequest
     * const BudgetRequest = await prisma.budgetRequest.delete({
     *   where: {
     *     // ... filter to delete one BudgetRequest
     *   }
     * })
     * 
     */
    delete<T extends BudgetRequestDeleteArgs>(args: SelectSubset<T, BudgetRequestDeleteArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BudgetRequest.
     * @param {BudgetRequestUpdateArgs} args - Arguments to update one BudgetRequest.
     * @example
     * // Update one BudgetRequest
     * const budgetRequest = await prisma.budgetRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetRequestUpdateArgs>(args: SelectSubset<T, BudgetRequestUpdateArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BudgetRequests.
     * @param {BudgetRequestDeleteManyArgs} args - Arguments to filter BudgetRequests to delete.
     * @example
     * // Delete a few BudgetRequests
     * const { count } = await prisma.budgetRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetRequestDeleteManyArgs>(args?: SelectSubset<T, BudgetRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BudgetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BudgetRequests
     * const budgetRequest = await prisma.budgetRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetRequestUpdateManyArgs>(args: SelectSubset<T, BudgetRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BudgetRequest.
     * @param {BudgetRequestUpsertArgs} args - Arguments to update or create a BudgetRequest.
     * @example
     * // Update or create a BudgetRequest
     * const budgetRequest = await prisma.budgetRequest.upsert({
     *   create: {
     *     // ... data to create a BudgetRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BudgetRequest we want to update
     *   }
     * })
     */
    upsert<T extends BudgetRequestUpsertArgs>(args: SelectSubset<T, BudgetRequestUpsertArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BudgetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetRequestCountArgs} args - Arguments to filter BudgetRequests to count.
     * @example
     * // Count the number of BudgetRequests
     * const count = await prisma.budgetRequest.count({
     *   where: {
     *     // ... the filter for the BudgetRequests we want to count
     *   }
     * })
    **/
    count<T extends BudgetRequestCountArgs>(
      args?: Subset<T, BudgetRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BudgetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetRequestAggregateArgs>(args: Subset<T, BudgetRequestAggregateArgs>): Prisma.PrismaPromise<GetBudgetRequestAggregateType<T>>

    /**
     * Group by BudgetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetRequestGroupByArgs['orderBy'] }
        : { orderBy?: BudgetRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BudgetRequest model
   */
  readonly fields: BudgetRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BudgetRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    validator<T extends BudgetRequest$validatorArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequest$validatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    dept<T extends BudgetRequest$deptArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequest$deptArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    comments<T extends BudgetRequest$commentsArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequest$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    items<T extends BudgetRequest$itemsArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequest$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "findMany"> | Null>
    executions<T extends BudgetRequest$executionsArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequest$executionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BudgetRequest model
   */ 
  interface BudgetRequestFieldRefs {
    readonly id: FieldRef<"BudgetRequest", 'String'>
    readonly agentId: FieldRef<"BudgetRequest", 'String'>
    readonly agentName: FieldRef<"BudgetRequest", 'String'>
    readonly department: FieldRef<"BudgetRequest", 'String'>
    readonly category: FieldRef<"BudgetRequest", 'String'>
    readonly title: FieldRef<"BudgetRequest", 'String'>
    readonly description: FieldRef<"BudgetRequest", 'String'>
    readonly amount: FieldRef<"BudgetRequest", 'Float'>
    readonly justification: FieldRef<"BudgetRequest", 'String'>
    readonly accountCode: FieldRef<"BudgetRequest", 'String'>
    readonly urgency: FieldRef<"BudgetRequest", 'UrgencyLevel'>
    readonly attachments: FieldRef<"BudgetRequest", 'String[]'>
    readonly status: FieldRef<"BudgetRequest", 'RequestStatus'>
    readonly createdAt: FieldRef<"BudgetRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"BudgetRequest", 'DateTime'>
    readonly validatedBy: FieldRef<"BudgetRequest", 'String'>
    readonly validatedAt: FieldRef<"BudgetRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BudgetRequest findUnique
   */
  export type BudgetRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * Filter, which BudgetRequest to fetch.
     */
    where: BudgetRequestWhereUniqueInput
  }

  /**
   * BudgetRequest findUniqueOrThrow
   */
  export type BudgetRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * Filter, which BudgetRequest to fetch.
     */
    where: BudgetRequestWhereUniqueInput
  }

  /**
   * BudgetRequest findFirst
   */
  export type BudgetRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * Filter, which BudgetRequest to fetch.
     */
    where?: BudgetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetRequests to fetch.
     */
    orderBy?: BudgetRequestOrderByWithRelationInput | BudgetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetRequests.
     */
    cursor?: BudgetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetRequests.
     */
    distinct?: BudgetRequestScalarFieldEnum | BudgetRequestScalarFieldEnum[]
  }

  /**
   * BudgetRequest findFirstOrThrow
   */
  export type BudgetRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * Filter, which BudgetRequest to fetch.
     */
    where?: BudgetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetRequests to fetch.
     */
    orderBy?: BudgetRequestOrderByWithRelationInput | BudgetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetRequests.
     */
    cursor?: BudgetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetRequests.
     */
    distinct?: BudgetRequestScalarFieldEnum | BudgetRequestScalarFieldEnum[]
  }

  /**
   * BudgetRequest findMany
   */
  export type BudgetRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * Filter, which BudgetRequests to fetch.
     */
    where?: BudgetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetRequests to fetch.
     */
    orderBy?: BudgetRequestOrderByWithRelationInput | BudgetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BudgetRequests.
     */
    cursor?: BudgetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetRequests.
     */
    skip?: number
    distinct?: BudgetRequestScalarFieldEnum | BudgetRequestScalarFieldEnum[]
  }

  /**
   * BudgetRequest create
   */
  export type BudgetRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a BudgetRequest.
     */
    data: XOR<BudgetRequestCreateInput, BudgetRequestUncheckedCreateInput>
  }

  /**
   * BudgetRequest createMany
   */
  export type BudgetRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BudgetRequests.
     */
    data: BudgetRequestCreateManyInput | BudgetRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BudgetRequest createManyAndReturn
   */
  export type BudgetRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BudgetRequests.
     */
    data: BudgetRequestCreateManyInput | BudgetRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BudgetRequest update
   */
  export type BudgetRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a BudgetRequest.
     */
    data: XOR<BudgetRequestUpdateInput, BudgetRequestUncheckedUpdateInput>
    /**
     * Choose, which BudgetRequest to update.
     */
    where: BudgetRequestWhereUniqueInput
  }

  /**
   * BudgetRequest updateMany
   */
  export type BudgetRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BudgetRequests.
     */
    data: XOR<BudgetRequestUpdateManyMutationInput, BudgetRequestUncheckedUpdateManyInput>
    /**
     * Filter which BudgetRequests to update
     */
    where?: BudgetRequestWhereInput
  }

  /**
   * BudgetRequest upsert
   */
  export type BudgetRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the BudgetRequest to update in case it exists.
     */
    where: BudgetRequestWhereUniqueInput
    /**
     * In case the BudgetRequest found by the `where` argument doesn't exist, create a new BudgetRequest with this data.
     */
    create: XOR<BudgetRequestCreateInput, BudgetRequestUncheckedCreateInput>
    /**
     * In case the BudgetRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetRequestUpdateInput, BudgetRequestUncheckedUpdateInput>
  }

  /**
   * BudgetRequest delete
   */
  export type BudgetRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
    /**
     * Filter which BudgetRequest to delete.
     */
    where: BudgetRequestWhereUniqueInput
  }

  /**
   * BudgetRequest deleteMany
   */
  export type BudgetRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetRequests to delete
     */
    where?: BudgetRequestWhereInput
  }

  /**
   * BudgetRequest.validator
   */
  export type BudgetRequest$validatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * BudgetRequest.dept
   */
  export type BudgetRequest$deptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * BudgetRequest.comments
   */
  export type BudgetRequest$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * BudgetRequest.items
   */
  export type BudgetRequest$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    where?: RequestItemWhereInput
    orderBy?: RequestItemOrderByWithRelationInput | RequestItemOrderByWithRelationInput[]
    cursor?: RequestItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestItemScalarFieldEnum | RequestItemScalarFieldEnum[]
  }

  /**
   * BudgetRequest.executions
   */
  export type BudgetRequest$executionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    where?: BudgetExecutionWhereInput
    orderBy?: BudgetExecutionOrderByWithRelationInput | BudgetExecutionOrderByWithRelationInput[]
    cursor?: BudgetExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetExecutionScalarFieldEnum | BudgetExecutionScalarFieldEnum[]
  }

  /**
   * BudgetRequest without action
   */
  export type BudgetRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetRequest
     */
    select?: BudgetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetRequestInclude<ExtArgs> | null
  }


  /**
   * Model RequestItem
   */

  export type AggregateRequestItem = {
    _count: RequestItemCountAggregateOutputType | null
    _avg: RequestItemAvgAggregateOutputType | null
    _sum: RequestItemSumAggregateOutputType | null
    _min: RequestItemMinAggregateOutputType | null
    _max: RequestItemMaxAggregateOutputType | null
  }

  export type RequestItemAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type RequestItemSumAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type RequestItemMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    description: string | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
  }

  export type RequestItemMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    description: string | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
  }

  export type RequestItemCountAggregateOutputType = {
    id: number
    requestId: number
    description: number
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt: number
    _all: number
  }


  export type RequestItemAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type RequestItemSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type RequestItemMinAggregateInputType = {
    id?: true
    requestId?: true
    description?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
  }

  export type RequestItemMaxAggregateInputType = {
    id?: true
    requestId?: true
    description?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
  }

  export type RequestItemCountAggregateInputType = {
    id?: true
    requestId?: true
    description?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
    _all?: true
  }

  export type RequestItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestItem to aggregate.
     */
    where?: RequestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestItems to fetch.
     */
    orderBy?: RequestItemOrderByWithRelationInput | RequestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestItems
    **/
    _count?: true | RequestItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestItemMaxAggregateInputType
  }

  export type GetRequestItemAggregateType<T extends RequestItemAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestItem[P]>
      : GetScalarType<T[P], AggregateRequestItem[P]>
  }




  export type RequestItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestItemWhereInput
    orderBy?: RequestItemOrderByWithAggregationInput | RequestItemOrderByWithAggregationInput[]
    by: RequestItemScalarFieldEnum[] | RequestItemScalarFieldEnum
    having?: RequestItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestItemCountAggregateInputType | true
    _avg?: RequestItemAvgAggregateInputType
    _sum?: RequestItemSumAggregateInputType
    _min?: RequestItemMinAggregateInputType
    _max?: RequestItemMaxAggregateInputType
  }

  export type RequestItemGroupByOutputType = {
    id: string
    requestId: string
    description: string
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt: Date
    _count: RequestItemCountAggregateOutputType | null
    _avg: RequestItemAvgAggregateOutputType | null
    _sum: RequestItemSumAggregateOutputType | null
    _min: RequestItemMinAggregateOutputType | null
    _max: RequestItemMaxAggregateOutputType | null
  }

  type GetRequestItemGroupByPayload<T extends RequestItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestItemGroupByOutputType[P]>
            : GetScalarType<T[P], RequestItemGroupByOutputType[P]>
        }
      >
    >


  export type RequestItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestItem"]>

  export type RequestItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestItem"]>

  export type RequestItemSelectScalar = {
    id?: boolean
    requestId?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
  }

  export type RequestItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }
  export type RequestItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }

  export type $RequestItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestItem"
    objects: {
      request: Prisma.$BudgetRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      description: string
      quantity: number
      unitPrice: number
      totalPrice: number
      createdAt: Date
    }, ExtArgs["result"]["requestItem"]>
    composites: {}
  }

  type RequestItemGetPayload<S extends boolean | null | undefined | RequestItemDefaultArgs> = $Result.GetResult<Prisma.$RequestItemPayload, S>

  type RequestItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RequestItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequestItemCountAggregateInputType | true
    }

  export interface RequestItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestItem'], meta: { name: 'RequestItem' } }
    /**
     * Find zero or one RequestItem that matches the filter.
     * @param {RequestItemFindUniqueArgs} args - Arguments to find a RequestItem
     * @example
     * // Get one RequestItem
     * const requestItem = await prisma.requestItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestItemFindUniqueArgs>(args: SelectSubset<T, RequestItemFindUniqueArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RequestItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RequestItemFindUniqueOrThrowArgs} args - Arguments to find a RequestItem
     * @example
     * // Get one RequestItem
     * const requestItem = await prisma.requestItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestItemFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RequestItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestItemFindFirstArgs} args - Arguments to find a RequestItem
     * @example
     * // Get one RequestItem
     * const requestItem = await prisma.requestItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestItemFindFirstArgs>(args?: SelectSubset<T, RequestItemFindFirstArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RequestItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestItemFindFirstOrThrowArgs} args - Arguments to find a RequestItem
     * @example
     * // Get one RequestItem
     * const requestItem = await prisma.requestItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestItemFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RequestItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestItems
     * const requestItems = await prisma.requestItem.findMany()
     * 
     * // Get first 10 RequestItems
     * const requestItems = await prisma.requestItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestItemWithIdOnly = await prisma.requestItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestItemFindManyArgs>(args?: SelectSubset<T, RequestItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RequestItem.
     * @param {RequestItemCreateArgs} args - Arguments to create a RequestItem.
     * @example
     * // Create one RequestItem
     * const RequestItem = await prisma.requestItem.create({
     *   data: {
     *     // ... data to create a RequestItem
     *   }
     * })
     * 
     */
    create<T extends RequestItemCreateArgs>(args: SelectSubset<T, RequestItemCreateArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RequestItems.
     * @param {RequestItemCreateManyArgs} args - Arguments to create many RequestItems.
     * @example
     * // Create many RequestItems
     * const requestItem = await prisma.requestItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestItemCreateManyArgs>(args?: SelectSubset<T, RequestItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestItems and returns the data saved in the database.
     * @param {RequestItemCreateManyAndReturnArgs} args - Arguments to create many RequestItems.
     * @example
     * // Create many RequestItems
     * const requestItem = await prisma.requestItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestItems and only return the `id`
     * const requestItemWithIdOnly = await prisma.requestItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestItemCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RequestItem.
     * @param {RequestItemDeleteArgs} args - Arguments to delete one RequestItem.
     * @example
     * // Delete one RequestItem
     * const RequestItem = await prisma.requestItem.delete({
     *   where: {
     *     // ... filter to delete one RequestItem
     *   }
     * })
     * 
     */
    delete<T extends RequestItemDeleteArgs>(args: SelectSubset<T, RequestItemDeleteArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RequestItem.
     * @param {RequestItemUpdateArgs} args - Arguments to update one RequestItem.
     * @example
     * // Update one RequestItem
     * const requestItem = await prisma.requestItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestItemUpdateArgs>(args: SelectSubset<T, RequestItemUpdateArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RequestItems.
     * @param {RequestItemDeleteManyArgs} args - Arguments to filter RequestItems to delete.
     * @example
     * // Delete a few RequestItems
     * const { count } = await prisma.requestItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestItemDeleteManyArgs>(args?: SelectSubset<T, RequestItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestItems
     * const requestItem = await prisma.requestItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestItemUpdateManyArgs>(args: SelectSubset<T, RequestItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RequestItem.
     * @param {RequestItemUpsertArgs} args - Arguments to update or create a RequestItem.
     * @example
     * // Update or create a RequestItem
     * const requestItem = await prisma.requestItem.upsert({
     *   create: {
     *     // ... data to create a RequestItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestItem we want to update
     *   }
     * })
     */
    upsert<T extends RequestItemUpsertArgs>(args: SelectSubset<T, RequestItemUpsertArgs<ExtArgs>>): Prisma__RequestItemClient<$Result.GetResult<Prisma.$RequestItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RequestItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestItemCountArgs} args - Arguments to filter RequestItems to count.
     * @example
     * // Count the number of RequestItems
     * const count = await prisma.requestItem.count({
     *   where: {
     *     // ... the filter for the RequestItems we want to count
     *   }
     * })
    **/
    count<T extends RequestItemCountArgs>(
      args?: Subset<T, RequestItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestItemAggregateArgs>(args: Subset<T, RequestItemAggregateArgs>): Prisma.PrismaPromise<GetRequestItemAggregateType<T>>

    /**
     * Group by RequestItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestItemGroupByArgs['orderBy'] }
        : { orderBy?: RequestItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestItem model
   */
  readonly fields: RequestItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends BudgetRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequestDefaultArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestItem model
   */ 
  interface RequestItemFieldRefs {
    readonly id: FieldRef<"RequestItem", 'String'>
    readonly requestId: FieldRef<"RequestItem", 'String'>
    readonly description: FieldRef<"RequestItem", 'String'>
    readonly quantity: FieldRef<"RequestItem", 'Int'>
    readonly unitPrice: FieldRef<"RequestItem", 'Float'>
    readonly totalPrice: FieldRef<"RequestItem", 'Float'>
    readonly createdAt: FieldRef<"RequestItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestItem findUnique
   */
  export type RequestItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * Filter, which RequestItem to fetch.
     */
    where: RequestItemWhereUniqueInput
  }

  /**
   * RequestItem findUniqueOrThrow
   */
  export type RequestItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * Filter, which RequestItem to fetch.
     */
    where: RequestItemWhereUniqueInput
  }

  /**
   * RequestItem findFirst
   */
  export type RequestItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * Filter, which RequestItem to fetch.
     */
    where?: RequestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestItems to fetch.
     */
    orderBy?: RequestItemOrderByWithRelationInput | RequestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestItems.
     */
    cursor?: RequestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestItems.
     */
    distinct?: RequestItemScalarFieldEnum | RequestItemScalarFieldEnum[]
  }

  /**
   * RequestItem findFirstOrThrow
   */
  export type RequestItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * Filter, which RequestItem to fetch.
     */
    where?: RequestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestItems to fetch.
     */
    orderBy?: RequestItemOrderByWithRelationInput | RequestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestItems.
     */
    cursor?: RequestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestItems.
     */
    distinct?: RequestItemScalarFieldEnum | RequestItemScalarFieldEnum[]
  }

  /**
   * RequestItem findMany
   */
  export type RequestItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * Filter, which RequestItems to fetch.
     */
    where?: RequestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestItems to fetch.
     */
    orderBy?: RequestItemOrderByWithRelationInput | RequestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestItems.
     */
    cursor?: RequestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestItems.
     */
    skip?: number
    distinct?: RequestItemScalarFieldEnum | RequestItemScalarFieldEnum[]
  }

  /**
   * RequestItem create
   */
  export type RequestItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestItem.
     */
    data: XOR<RequestItemCreateInput, RequestItemUncheckedCreateInput>
  }

  /**
   * RequestItem createMany
   */
  export type RequestItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestItems.
     */
    data: RequestItemCreateManyInput | RequestItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestItem createManyAndReturn
   */
  export type RequestItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RequestItems.
     */
    data: RequestItemCreateManyInput | RequestItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestItem update
   */
  export type RequestItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestItem.
     */
    data: XOR<RequestItemUpdateInput, RequestItemUncheckedUpdateInput>
    /**
     * Choose, which RequestItem to update.
     */
    where: RequestItemWhereUniqueInput
  }

  /**
   * RequestItem updateMany
   */
  export type RequestItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestItems.
     */
    data: XOR<RequestItemUpdateManyMutationInput, RequestItemUncheckedUpdateManyInput>
    /**
     * Filter which RequestItems to update
     */
    where?: RequestItemWhereInput
  }

  /**
   * RequestItem upsert
   */
  export type RequestItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestItem to update in case it exists.
     */
    where: RequestItemWhereUniqueInput
    /**
     * In case the RequestItem found by the `where` argument doesn't exist, create a new RequestItem with this data.
     */
    create: XOR<RequestItemCreateInput, RequestItemUncheckedCreateInput>
    /**
     * In case the RequestItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestItemUpdateInput, RequestItemUncheckedUpdateInput>
  }

  /**
   * RequestItem delete
   */
  export type RequestItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
    /**
     * Filter which RequestItem to delete.
     */
    where: RequestItemWhereUniqueInput
  }

  /**
   * RequestItem deleteMany
   */
  export type RequestItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestItems to delete
     */
    where?: RequestItemWhereInput
  }

  /**
   * RequestItem without action
   */
  export type RequestItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestItem
     */
    select?: RequestItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestItemInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    userId: string | null
    userName: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    userId: string | null
    userName: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    requestId: number
    userId: number
    userName: number
    content: number
    createdAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    content?: true
    createdAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    content?: true
    createdAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    requestId: string
    userId: string
    userName: string
    content: string
    createdAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    content?: boolean
    createdAt?: boolean
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    content?: boolean
    createdAt?: boolean
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      request: Prisma.$BudgetRequestPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      userId: string
      userName: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends BudgetRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequestDefaultArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly requestId: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly userName: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    isRead: number
    actionUrl: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead: boolean
    actionUrl: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.NotificationType
      title: string
      message: string
      isRead: boolean
      actionUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    userName: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    details: string | null
    ipAddress: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    userName: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    details: string | null
    ipAddress: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    userName: number
    action: number
    entity: number
    entityId: number
    details: number
    ipAddress: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    ipAddress?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    ipAddress?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    ipAddress?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    userName: string
    action: string
    entity: string
    entityId: string
    details: string
    ipAddress: string | null
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    ipAddress?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    ipAddress?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    ipAddress?: boolean
    timestamp?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      userName: string
      action: string
      entity: string
      entityId: string
      details: string
      ipAddress: string | null
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly userName: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model BudgetExecution
   */

  export type AggregateBudgetExecution = {
    _count: BudgetExecutionCountAggregateOutputType | null
    _avg: BudgetExecutionAvgAggregateOutputType | null
    _sum: BudgetExecutionSumAggregateOutputType | null
    _min: BudgetExecutionMinAggregateOutputType | null
    _max: BudgetExecutionMaxAggregateOutputType | null
  }

  export type BudgetExecutionAvgAggregateOutputType = {
    amount: number | null
  }

  export type BudgetExecutionSumAggregateOutputType = {
    amount: number | null
  }

  export type BudgetExecutionMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    supplierId: string | null
    supplierName: string | null
    invoiceNumber: string | null
    invoiceDate: Date | null
    amount: number | null
    status: $Enums.ExecutionStatus | null
    paymentDate: Date | null
    deliveryDate: Date | null
    receivedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BudgetExecutionMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    supplierId: string | null
    supplierName: string | null
    invoiceNumber: string | null
    invoiceDate: Date | null
    amount: number | null
    status: $Enums.ExecutionStatus | null
    paymentDate: Date | null
    deliveryDate: Date | null
    receivedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BudgetExecutionCountAggregateOutputType = {
    id: number
    requestId: number
    supplierId: number
    supplierName: number
    invoiceNumber: number
    invoiceDate: number
    amount: number
    status: number
    paymentDate: number
    deliveryDate: number
    receivedBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BudgetExecutionAvgAggregateInputType = {
    amount?: true
  }

  export type BudgetExecutionSumAggregateInputType = {
    amount?: true
  }

  export type BudgetExecutionMinAggregateInputType = {
    id?: true
    requestId?: true
    supplierId?: true
    supplierName?: true
    invoiceNumber?: true
    invoiceDate?: true
    amount?: true
    status?: true
    paymentDate?: true
    deliveryDate?: true
    receivedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BudgetExecutionMaxAggregateInputType = {
    id?: true
    requestId?: true
    supplierId?: true
    supplierName?: true
    invoiceNumber?: true
    invoiceDate?: true
    amount?: true
    status?: true
    paymentDate?: true
    deliveryDate?: true
    receivedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BudgetExecutionCountAggregateInputType = {
    id?: true
    requestId?: true
    supplierId?: true
    supplierName?: true
    invoiceNumber?: true
    invoiceDate?: true
    amount?: true
    status?: true
    paymentDate?: true
    deliveryDate?: true
    receivedBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BudgetExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetExecution to aggregate.
     */
    where?: BudgetExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetExecutions to fetch.
     */
    orderBy?: BudgetExecutionOrderByWithRelationInput | BudgetExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BudgetExecutions
    **/
    _count?: true | BudgetExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetExecutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetExecutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetExecutionMaxAggregateInputType
  }

  export type GetBudgetExecutionAggregateType<T extends BudgetExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateBudgetExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudgetExecution[P]>
      : GetScalarType<T[P], AggregateBudgetExecution[P]>
  }




  export type BudgetExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetExecutionWhereInput
    orderBy?: BudgetExecutionOrderByWithAggregationInput | BudgetExecutionOrderByWithAggregationInput[]
    by: BudgetExecutionScalarFieldEnum[] | BudgetExecutionScalarFieldEnum
    having?: BudgetExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetExecutionCountAggregateInputType | true
    _avg?: BudgetExecutionAvgAggregateInputType
    _sum?: BudgetExecutionSumAggregateInputType
    _min?: BudgetExecutionMinAggregateInputType
    _max?: BudgetExecutionMaxAggregateInputType
  }

  export type BudgetExecutionGroupByOutputType = {
    id: string
    requestId: string
    supplierId: string
    supplierName: string
    invoiceNumber: string
    invoiceDate: Date
    amount: number
    status: $Enums.ExecutionStatus
    paymentDate: Date | null
    deliveryDate: Date | null
    receivedBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: BudgetExecutionCountAggregateOutputType | null
    _avg: BudgetExecutionAvgAggregateOutputType | null
    _sum: BudgetExecutionSumAggregateOutputType | null
    _min: BudgetExecutionMinAggregateOutputType | null
    _max: BudgetExecutionMaxAggregateOutputType | null
  }

  type GetBudgetExecutionGroupByPayload<T extends BudgetExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetExecutionGroupByOutputType[P]>
        }
      >
    >


  export type BudgetExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    supplierId?: boolean
    supplierName?: boolean
    invoiceNumber?: boolean
    invoiceDate?: boolean
    amount?: boolean
    status?: boolean
    paymentDate?: boolean
    deliveryDate?: boolean
    receivedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgetExecution"]>

  export type BudgetExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    supplierId?: boolean
    supplierName?: boolean
    invoiceNumber?: boolean
    invoiceDate?: boolean
    amount?: boolean
    status?: boolean
    paymentDate?: boolean
    deliveryDate?: boolean
    receivedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgetExecution"]>

  export type BudgetExecutionSelectScalar = {
    id?: boolean
    requestId?: boolean
    supplierId?: boolean
    supplierName?: boolean
    invoiceNumber?: boolean
    invoiceDate?: boolean
    amount?: boolean
    status?: boolean
    paymentDate?: boolean
    deliveryDate?: boolean
    receivedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BudgetExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }
  export type BudgetExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | BudgetRequestDefaultArgs<ExtArgs>
  }

  export type $BudgetExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BudgetExecution"
    objects: {
      request: Prisma.$BudgetRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      supplierId: string
      supplierName: string
      invoiceNumber: string
      invoiceDate: Date
      amount: number
      status: $Enums.ExecutionStatus
      paymentDate: Date | null
      deliveryDate: Date | null
      receivedBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["budgetExecution"]>
    composites: {}
  }

  type BudgetExecutionGetPayload<S extends boolean | null | undefined | BudgetExecutionDefaultArgs> = $Result.GetResult<Prisma.$BudgetExecutionPayload, S>

  type BudgetExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BudgetExecutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BudgetExecutionCountAggregateInputType | true
    }

  export interface BudgetExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BudgetExecution'], meta: { name: 'BudgetExecution' } }
    /**
     * Find zero or one BudgetExecution that matches the filter.
     * @param {BudgetExecutionFindUniqueArgs} args - Arguments to find a BudgetExecution
     * @example
     * // Get one BudgetExecution
     * const budgetExecution = await prisma.budgetExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetExecutionFindUniqueArgs>(args: SelectSubset<T, BudgetExecutionFindUniqueArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BudgetExecution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BudgetExecutionFindUniqueOrThrowArgs} args - Arguments to find a BudgetExecution
     * @example
     * // Get one BudgetExecution
     * const budgetExecution = await prisma.budgetExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BudgetExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetExecutionFindFirstArgs} args - Arguments to find a BudgetExecution
     * @example
     * // Get one BudgetExecution
     * const budgetExecution = await prisma.budgetExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetExecutionFindFirstArgs>(args?: SelectSubset<T, BudgetExecutionFindFirstArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BudgetExecution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetExecutionFindFirstOrThrowArgs} args - Arguments to find a BudgetExecution
     * @example
     * // Get one BudgetExecution
     * const budgetExecution = await prisma.budgetExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BudgetExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BudgetExecutions
     * const budgetExecutions = await prisma.budgetExecution.findMany()
     * 
     * // Get first 10 BudgetExecutions
     * const budgetExecutions = await prisma.budgetExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetExecutionWithIdOnly = await prisma.budgetExecution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetExecutionFindManyArgs>(args?: SelectSubset<T, BudgetExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BudgetExecution.
     * @param {BudgetExecutionCreateArgs} args - Arguments to create a BudgetExecution.
     * @example
     * // Create one BudgetExecution
     * const BudgetExecution = await prisma.budgetExecution.create({
     *   data: {
     *     // ... data to create a BudgetExecution
     *   }
     * })
     * 
     */
    create<T extends BudgetExecutionCreateArgs>(args: SelectSubset<T, BudgetExecutionCreateArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BudgetExecutions.
     * @param {BudgetExecutionCreateManyArgs} args - Arguments to create many BudgetExecutions.
     * @example
     * // Create many BudgetExecutions
     * const budgetExecution = await prisma.budgetExecution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetExecutionCreateManyArgs>(args?: SelectSubset<T, BudgetExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BudgetExecutions and returns the data saved in the database.
     * @param {BudgetExecutionCreateManyAndReturnArgs} args - Arguments to create many BudgetExecutions.
     * @example
     * // Create many BudgetExecutions
     * const budgetExecution = await prisma.budgetExecution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BudgetExecutions and only return the `id`
     * const budgetExecutionWithIdOnly = await prisma.budgetExecution.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BudgetExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, BudgetExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BudgetExecution.
     * @param {BudgetExecutionDeleteArgs} args - Arguments to delete one BudgetExecution.
     * @example
     * // Delete one BudgetExecution
     * const BudgetExecution = await prisma.budgetExecution.delete({
     *   where: {
     *     // ... filter to delete one BudgetExecution
     *   }
     * })
     * 
     */
    delete<T extends BudgetExecutionDeleteArgs>(args: SelectSubset<T, BudgetExecutionDeleteArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BudgetExecution.
     * @param {BudgetExecutionUpdateArgs} args - Arguments to update one BudgetExecution.
     * @example
     * // Update one BudgetExecution
     * const budgetExecution = await prisma.budgetExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetExecutionUpdateArgs>(args: SelectSubset<T, BudgetExecutionUpdateArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BudgetExecutions.
     * @param {BudgetExecutionDeleteManyArgs} args - Arguments to filter BudgetExecutions to delete.
     * @example
     * // Delete a few BudgetExecutions
     * const { count } = await prisma.budgetExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetExecutionDeleteManyArgs>(args?: SelectSubset<T, BudgetExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BudgetExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BudgetExecutions
     * const budgetExecution = await prisma.budgetExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetExecutionUpdateManyArgs>(args: SelectSubset<T, BudgetExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BudgetExecution.
     * @param {BudgetExecutionUpsertArgs} args - Arguments to update or create a BudgetExecution.
     * @example
     * // Update or create a BudgetExecution
     * const budgetExecution = await prisma.budgetExecution.upsert({
     *   create: {
     *     // ... data to create a BudgetExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BudgetExecution we want to update
     *   }
     * })
     */
    upsert<T extends BudgetExecutionUpsertArgs>(args: SelectSubset<T, BudgetExecutionUpsertArgs<ExtArgs>>): Prisma__BudgetExecutionClient<$Result.GetResult<Prisma.$BudgetExecutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BudgetExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetExecutionCountArgs} args - Arguments to filter BudgetExecutions to count.
     * @example
     * // Count the number of BudgetExecutions
     * const count = await prisma.budgetExecution.count({
     *   where: {
     *     // ... the filter for the BudgetExecutions we want to count
     *   }
     * })
    **/
    count<T extends BudgetExecutionCountArgs>(
      args?: Subset<T, BudgetExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BudgetExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetExecutionAggregateArgs>(args: Subset<T, BudgetExecutionAggregateArgs>): Prisma.PrismaPromise<GetBudgetExecutionAggregateType<T>>

    /**
     * Group by BudgetExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetExecutionGroupByArgs['orderBy'] }
        : { orderBy?: BudgetExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BudgetExecution model
   */
  readonly fields: BudgetExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BudgetExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends BudgetRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BudgetRequestDefaultArgs<ExtArgs>>): Prisma__BudgetRequestClient<$Result.GetResult<Prisma.$BudgetRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BudgetExecution model
   */ 
  interface BudgetExecutionFieldRefs {
    readonly id: FieldRef<"BudgetExecution", 'String'>
    readonly requestId: FieldRef<"BudgetExecution", 'String'>
    readonly supplierId: FieldRef<"BudgetExecution", 'String'>
    readonly supplierName: FieldRef<"BudgetExecution", 'String'>
    readonly invoiceNumber: FieldRef<"BudgetExecution", 'String'>
    readonly invoiceDate: FieldRef<"BudgetExecution", 'DateTime'>
    readonly amount: FieldRef<"BudgetExecution", 'Float'>
    readonly status: FieldRef<"BudgetExecution", 'ExecutionStatus'>
    readonly paymentDate: FieldRef<"BudgetExecution", 'DateTime'>
    readonly deliveryDate: FieldRef<"BudgetExecution", 'DateTime'>
    readonly receivedBy: FieldRef<"BudgetExecution", 'String'>
    readonly createdAt: FieldRef<"BudgetExecution", 'DateTime'>
    readonly updatedAt: FieldRef<"BudgetExecution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BudgetExecution findUnique
   */
  export type BudgetExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * Filter, which BudgetExecution to fetch.
     */
    where: BudgetExecutionWhereUniqueInput
  }

  /**
   * BudgetExecution findUniqueOrThrow
   */
  export type BudgetExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * Filter, which BudgetExecution to fetch.
     */
    where: BudgetExecutionWhereUniqueInput
  }

  /**
   * BudgetExecution findFirst
   */
  export type BudgetExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * Filter, which BudgetExecution to fetch.
     */
    where?: BudgetExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetExecutions to fetch.
     */
    orderBy?: BudgetExecutionOrderByWithRelationInput | BudgetExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetExecutions.
     */
    cursor?: BudgetExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetExecutions.
     */
    distinct?: BudgetExecutionScalarFieldEnum | BudgetExecutionScalarFieldEnum[]
  }

  /**
   * BudgetExecution findFirstOrThrow
   */
  export type BudgetExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * Filter, which BudgetExecution to fetch.
     */
    where?: BudgetExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetExecutions to fetch.
     */
    orderBy?: BudgetExecutionOrderByWithRelationInput | BudgetExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetExecutions.
     */
    cursor?: BudgetExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetExecutions.
     */
    distinct?: BudgetExecutionScalarFieldEnum | BudgetExecutionScalarFieldEnum[]
  }

  /**
   * BudgetExecution findMany
   */
  export type BudgetExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * Filter, which BudgetExecutions to fetch.
     */
    where?: BudgetExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetExecutions to fetch.
     */
    orderBy?: BudgetExecutionOrderByWithRelationInput | BudgetExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BudgetExecutions.
     */
    cursor?: BudgetExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetExecutions.
     */
    skip?: number
    distinct?: BudgetExecutionScalarFieldEnum | BudgetExecutionScalarFieldEnum[]
  }

  /**
   * BudgetExecution create
   */
  export type BudgetExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a BudgetExecution.
     */
    data: XOR<BudgetExecutionCreateInput, BudgetExecutionUncheckedCreateInput>
  }

  /**
   * BudgetExecution createMany
   */
  export type BudgetExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BudgetExecutions.
     */
    data: BudgetExecutionCreateManyInput | BudgetExecutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BudgetExecution createManyAndReturn
   */
  export type BudgetExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BudgetExecutions.
     */
    data: BudgetExecutionCreateManyInput | BudgetExecutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BudgetExecution update
   */
  export type BudgetExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a BudgetExecution.
     */
    data: XOR<BudgetExecutionUpdateInput, BudgetExecutionUncheckedUpdateInput>
    /**
     * Choose, which BudgetExecution to update.
     */
    where: BudgetExecutionWhereUniqueInput
  }

  /**
   * BudgetExecution updateMany
   */
  export type BudgetExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BudgetExecutions.
     */
    data: XOR<BudgetExecutionUpdateManyMutationInput, BudgetExecutionUncheckedUpdateManyInput>
    /**
     * Filter which BudgetExecutions to update
     */
    where?: BudgetExecutionWhereInput
  }

  /**
   * BudgetExecution upsert
   */
  export type BudgetExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the BudgetExecution to update in case it exists.
     */
    where: BudgetExecutionWhereUniqueInput
    /**
     * In case the BudgetExecution found by the `where` argument doesn't exist, create a new BudgetExecution with this data.
     */
    create: XOR<BudgetExecutionCreateInput, BudgetExecutionUncheckedCreateInput>
    /**
     * In case the BudgetExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetExecutionUpdateInput, BudgetExecutionUncheckedUpdateInput>
  }

  /**
   * BudgetExecution delete
   */
  export type BudgetExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
    /**
     * Filter which BudgetExecution to delete.
     */
    where: BudgetExecutionWhereUniqueInput
  }

  /**
   * BudgetExecution deleteMany
   */
  export type BudgetExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetExecutions to delete
     */
    where?: BudgetExecutionWhereInput
  }

  /**
   * BudgetExecution without action
   */
  export type BudgetExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetExecution
     */
    select?: BudgetExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetExecutionInclude<ExtArgs> | null
  }


  /**
   * Model OhadaAccount
   */

  export type AggregateOhadaAccount = {
    _count: OhadaAccountCountAggregateOutputType | null
    _min: OhadaAccountMinAggregateOutputType | null
    _max: OhadaAccountMaxAggregateOutputType | null
  }

  export type OhadaAccountMinAggregateOutputType = {
    code: string | null
    name: string | null
    category: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OhadaAccountMaxAggregateOutputType = {
    code: string | null
    name: string | null
    category: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OhadaAccountCountAggregateOutputType = {
    code: number
    name: number
    category: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OhadaAccountMinAggregateInputType = {
    code?: true
    name?: true
    category?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OhadaAccountMaxAggregateInputType = {
    code?: true
    name?: true
    category?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OhadaAccountCountAggregateInputType = {
    code?: true
    name?: true
    category?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OhadaAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OhadaAccount to aggregate.
     */
    where?: OhadaAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OhadaAccounts to fetch.
     */
    orderBy?: OhadaAccountOrderByWithRelationInput | OhadaAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OhadaAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OhadaAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OhadaAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OhadaAccounts
    **/
    _count?: true | OhadaAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OhadaAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OhadaAccountMaxAggregateInputType
  }

  export type GetOhadaAccountAggregateType<T extends OhadaAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateOhadaAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOhadaAccount[P]>
      : GetScalarType<T[P], AggregateOhadaAccount[P]>
  }




  export type OhadaAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OhadaAccountWhereInput
    orderBy?: OhadaAccountOrderByWithAggregationInput | OhadaAccountOrderByWithAggregationInput[]
    by: OhadaAccountScalarFieldEnum[] | OhadaAccountScalarFieldEnum
    having?: OhadaAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OhadaAccountCountAggregateInputType | true
    _min?: OhadaAccountMinAggregateInputType
    _max?: OhadaAccountMaxAggregateInputType
  }

  export type OhadaAccountGroupByOutputType = {
    code: string
    name: string
    category: string
    description: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: OhadaAccountCountAggregateOutputType | null
    _min: OhadaAccountMinAggregateOutputType | null
    _max: OhadaAccountMaxAggregateOutputType | null
  }

  type GetOhadaAccountGroupByPayload<T extends OhadaAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OhadaAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OhadaAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OhadaAccountGroupByOutputType[P]>
            : GetScalarType<T[P], OhadaAccountGroupByOutputType[P]>
        }
      >
    >


  export type OhadaAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["ohadaAccount"]>

  export type OhadaAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["ohadaAccount"]>

  export type OhadaAccountSelectScalar = {
    code?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $OhadaAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OhadaAccount"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      category: string
      description: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ohadaAccount"]>
    composites: {}
  }

  type OhadaAccountGetPayload<S extends boolean | null | undefined | OhadaAccountDefaultArgs> = $Result.GetResult<Prisma.$OhadaAccountPayload, S>

  type OhadaAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OhadaAccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OhadaAccountCountAggregateInputType | true
    }

  export interface OhadaAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OhadaAccount'], meta: { name: 'OhadaAccount' } }
    /**
     * Find zero or one OhadaAccount that matches the filter.
     * @param {OhadaAccountFindUniqueArgs} args - Arguments to find a OhadaAccount
     * @example
     * // Get one OhadaAccount
     * const ohadaAccount = await prisma.ohadaAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OhadaAccountFindUniqueArgs>(args: SelectSubset<T, OhadaAccountFindUniqueArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OhadaAccount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OhadaAccountFindUniqueOrThrowArgs} args - Arguments to find a OhadaAccount
     * @example
     * // Get one OhadaAccount
     * const ohadaAccount = await prisma.ohadaAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OhadaAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, OhadaAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OhadaAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OhadaAccountFindFirstArgs} args - Arguments to find a OhadaAccount
     * @example
     * // Get one OhadaAccount
     * const ohadaAccount = await prisma.ohadaAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OhadaAccountFindFirstArgs>(args?: SelectSubset<T, OhadaAccountFindFirstArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OhadaAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OhadaAccountFindFirstOrThrowArgs} args - Arguments to find a OhadaAccount
     * @example
     * // Get one OhadaAccount
     * const ohadaAccount = await prisma.ohadaAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OhadaAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, OhadaAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OhadaAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OhadaAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OhadaAccounts
     * const ohadaAccounts = await prisma.ohadaAccount.findMany()
     * 
     * // Get first 10 OhadaAccounts
     * const ohadaAccounts = await prisma.ohadaAccount.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const ohadaAccountWithCodeOnly = await prisma.ohadaAccount.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends OhadaAccountFindManyArgs>(args?: SelectSubset<T, OhadaAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OhadaAccount.
     * @param {OhadaAccountCreateArgs} args - Arguments to create a OhadaAccount.
     * @example
     * // Create one OhadaAccount
     * const OhadaAccount = await prisma.ohadaAccount.create({
     *   data: {
     *     // ... data to create a OhadaAccount
     *   }
     * })
     * 
     */
    create<T extends OhadaAccountCreateArgs>(args: SelectSubset<T, OhadaAccountCreateArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OhadaAccounts.
     * @param {OhadaAccountCreateManyArgs} args - Arguments to create many OhadaAccounts.
     * @example
     * // Create many OhadaAccounts
     * const ohadaAccount = await prisma.ohadaAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OhadaAccountCreateManyArgs>(args?: SelectSubset<T, OhadaAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OhadaAccounts and returns the data saved in the database.
     * @param {OhadaAccountCreateManyAndReturnArgs} args - Arguments to create many OhadaAccounts.
     * @example
     * // Create many OhadaAccounts
     * const ohadaAccount = await prisma.ohadaAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OhadaAccounts and only return the `code`
     * const ohadaAccountWithCodeOnly = await prisma.ohadaAccount.createManyAndReturn({ 
     *   select: { code: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OhadaAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, OhadaAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OhadaAccount.
     * @param {OhadaAccountDeleteArgs} args - Arguments to delete one OhadaAccount.
     * @example
     * // Delete one OhadaAccount
     * const OhadaAccount = await prisma.ohadaAccount.delete({
     *   where: {
     *     // ... filter to delete one OhadaAccount
     *   }
     * })
     * 
     */
    delete<T extends OhadaAccountDeleteArgs>(args: SelectSubset<T, OhadaAccountDeleteArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OhadaAccount.
     * @param {OhadaAccountUpdateArgs} args - Arguments to update one OhadaAccount.
     * @example
     * // Update one OhadaAccount
     * const ohadaAccount = await prisma.ohadaAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OhadaAccountUpdateArgs>(args: SelectSubset<T, OhadaAccountUpdateArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OhadaAccounts.
     * @param {OhadaAccountDeleteManyArgs} args - Arguments to filter OhadaAccounts to delete.
     * @example
     * // Delete a few OhadaAccounts
     * const { count } = await prisma.ohadaAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OhadaAccountDeleteManyArgs>(args?: SelectSubset<T, OhadaAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OhadaAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OhadaAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OhadaAccounts
     * const ohadaAccount = await prisma.ohadaAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OhadaAccountUpdateManyArgs>(args: SelectSubset<T, OhadaAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OhadaAccount.
     * @param {OhadaAccountUpsertArgs} args - Arguments to update or create a OhadaAccount.
     * @example
     * // Update or create a OhadaAccount
     * const ohadaAccount = await prisma.ohadaAccount.upsert({
     *   create: {
     *     // ... data to create a OhadaAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OhadaAccount we want to update
     *   }
     * })
     */
    upsert<T extends OhadaAccountUpsertArgs>(args: SelectSubset<T, OhadaAccountUpsertArgs<ExtArgs>>): Prisma__OhadaAccountClient<$Result.GetResult<Prisma.$OhadaAccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OhadaAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OhadaAccountCountArgs} args - Arguments to filter OhadaAccounts to count.
     * @example
     * // Count the number of OhadaAccounts
     * const count = await prisma.ohadaAccount.count({
     *   where: {
     *     // ... the filter for the OhadaAccounts we want to count
     *   }
     * })
    **/
    count<T extends OhadaAccountCountArgs>(
      args?: Subset<T, OhadaAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OhadaAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OhadaAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OhadaAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OhadaAccountAggregateArgs>(args: Subset<T, OhadaAccountAggregateArgs>): Prisma.PrismaPromise<GetOhadaAccountAggregateType<T>>

    /**
     * Group by OhadaAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OhadaAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OhadaAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OhadaAccountGroupByArgs['orderBy'] }
        : { orderBy?: OhadaAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OhadaAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOhadaAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OhadaAccount model
   */
  readonly fields: OhadaAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OhadaAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OhadaAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OhadaAccount model
   */ 
  interface OhadaAccountFieldRefs {
    readonly code: FieldRef<"OhadaAccount", 'String'>
    readonly name: FieldRef<"OhadaAccount", 'String'>
    readonly category: FieldRef<"OhadaAccount", 'String'>
    readonly description: FieldRef<"OhadaAccount", 'String'>
    readonly isActive: FieldRef<"OhadaAccount", 'Boolean'>
    readonly createdAt: FieldRef<"OhadaAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"OhadaAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OhadaAccount findUnique
   */
  export type OhadaAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * Filter, which OhadaAccount to fetch.
     */
    where: OhadaAccountWhereUniqueInput
  }

  /**
   * OhadaAccount findUniqueOrThrow
   */
  export type OhadaAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * Filter, which OhadaAccount to fetch.
     */
    where: OhadaAccountWhereUniqueInput
  }

  /**
   * OhadaAccount findFirst
   */
  export type OhadaAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * Filter, which OhadaAccount to fetch.
     */
    where?: OhadaAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OhadaAccounts to fetch.
     */
    orderBy?: OhadaAccountOrderByWithRelationInput | OhadaAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OhadaAccounts.
     */
    cursor?: OhadaAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OhadaAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OhadaAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OhadaAccounts.
     */
    distinct?: OhadaAccountScalarFieldEnum | OhadaAccountScalarFieldEnum[]
  }

  /**
   * OhadaAccount findFirstOrThrow
   */
  export type OhadaAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * Filter, which OhadaAccount to fetch.
     */
    where?: OhadaAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OhadaAccounts to fetch.
     */
    orderBy?: OhadaAccountOrderByWithRelationInput | OhadaAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OhadaAccounts.
     */
    cursor?: OhadaAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OhadaAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OhadaAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OhadaAccounts.
     */
    distinct?: OhadaAccountScalarFieldEnum | OhadaAccountScalarFieldEnum[]
  }

  /**
   * OhadaAccount findMany
   */
  export type OhadaAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * Filter, which OhadaAccounts to fetch.
     */
    where?: OhadaAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OhadaAccounts to fetch.
     */
    orderBy?: OhadaAccountOrderByWithRelationInput | OhadaAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OhadaAccounts.
     */
    cursor?: OhadaAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OhadaAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OhadaAccounts.
     */
    skip?: number
    distinct?: OhadaAccountScalarFieldEnum | OhadaAccountScalarFieldEnum[]
  }

  /**
   * OhadaAccount create
   */
  export type OhadaAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * The data needed to create a OhadaAccount.
     */
    data: XOR<OhadaAccountCreateInput, OhadaAccountUncheckedCreateInput>
  }

  /**
   * OhadaAccount createMany
   */
  export type OhadaAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OhadaAccounts.
     */
    data: OhadaAccountCreateManyInput | OhadaAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OhadaAccount createManyAndReturn
   */
  export type OhadaAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OhadaAccounts.
     */
    data: OhadaAccountCreateManyInput | OhadaAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OhadaAccount update
   */
  export type OhadaAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * The data needed to update a OhadaAccount.
     */
    data: XOR<OhadaAccountUpdateInput, OhadaAccountUncheckedUpdateInput>
    /**
     * Choose, which OhadaAccount to update.
     */
    where: OhadaAccountWhereUniqueInput
  }

  /**
   * OhadaAccount updateMany
   */
  export type OhadaAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OhadaAccounts.
     */
    data: XOR<OhadaAccountUpdateManyMutationInput, OhadaAccountUncheckedUpdateManyInput>
    /**
     * Filter which OhadaAccounts to update
     */
    where?: OhadaAccountWhereInput
  }

  /**
   * OhadaAccount upsert
   */
  export type OhadaAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * The filter to search for the OhadaAccount to update in case it exists.
     */
    where: OhadaAccountWhereUniqueInput
    /**
     * In case the OhadaAccount found by the `where` argument doesn't exist, create a new OhadaAccount with this data.
     */
    create: XOR<OhadaAccountCreateInput, OhadaAccountUncheckedCreateInput>
    /**
     * In case the OhadaAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OhadaAccountUpdateInput, OhadaAccountUncheckedUpdateInput>
  }

  /**
   * OhadaAccount delete
   */
  export type OhadaAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
    /**
     * Filter which OhadaAccount to delete.
     */
    where: OhadaAccountWhereUniqueInput
  }

  /**
   * OhadaAccount deleteMany
   */
  export type OhadaAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OhadaAccounts to delete
     */
    where?: OhadaAccountWhereInput
  }

  /**
   * OhadaAccount without action
   */
  export type OhadaAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OhadaAccount
     */
    select?: OhadaAccountSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    password: 'password',
    role: 'role',
    department: 'department',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    chefId: 'chefId',
    totalBudget: 'totalBudget',
    usedBudget: 'usedBudget',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const BudgetRequestScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    agentName: 'agentName',
    department: 'department',
    category: 'category',
    title: 'title',
    description: 'description',
    amount: 'amount',
    justification: 'justification',
    accountCode: 'accountCode',
    urgency: 'urgency',
    attachments: 'attachments',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    validatedBy: 'validatedBy',
    validatedAt: 'validatedAt'
  };

  export type BudgetRequestScalarFieldEnum = (typeof BudgetRequestScalarFieldEnum)[keyof typeof BudgetRequestScalarFieldEnum]


  export const RequestItemScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    description: 'description',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    createdAt: 'createdAt'
  };

  export type RequestItemScalarFieldEnum = (typeof RequestItemScalarFieldEnum)[keyof typeof RequestItemScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    userId: 'userId',
    userName: 'userName',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    actionUrl: 'actionUrl',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    userName: 'userName',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    details: 'details',
    ipAddress: 'ipAddress',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const BudgetExecutionScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    supplierId: 'supplierId',
    supplierName: 'supplierName',
    invoiceNumber: 'invoiceNumber',
    invoiceDate: 'invoiceDate',
    amount: 'amount',
    status: 'status',
    paymentDate: 'paymentDate',
    deliveryDate: 'deliveryDate',
    receivedBy: 'receivedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BudgetExecutionScalarFieldEnum = (typeof BudgetExecutionScalarFieldEnum)[keyof typeof BudgetExecutionScalarFieldEnum]


  export const OhadaAccountScalarFieldEnum: {
    code: 'code',
    name: 'name',
    category: 'category',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OhadaAccountScalarFieldEnum = (typeof OhadaAccountScalarFieldEnum)[keyof typeof OhadaAccountScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'UrgencyLevel'
   */
  export type EnumUrgencyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UrgencyLevel'>
    


  /**
   * Reference to a field of type 'UrgencyLevel[]'
   */
  export type ListEnumUrgencyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UrgencyLevel[]'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    


  /**
   * Reference to a field of type 'RequestStatus[]'
   */
  export type ListEnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'ExecutionStatus'
   */
  export type EnumExecutionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExecutionStatus'>
    


  /**
   * Reference to a field of type 'ExecutionStatus[]'
   */
  export type ListEnumExecutionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExecutionStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    department?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    budgetRequests?: BudgetRequestListRelationFilter
    validatedRequests?: BudgetRequestListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    departments?: DepartmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    budgetRequests?: BudgetRequestOrderByRelationAggregateInput
    validatedRequests?: BudgetRequestOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    department?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    budgetRequests?: BudgetRequestListRelationFilter
    validatedRequests?: BudgetRequestListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    departments?: DepartmentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    department?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    chefId?: StringFilter<"Department"> | string
    totalBudget?: FloatFilter<"Department"> | number
    usedBudget?: FloatFilter<"Department"> | number
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    chef?: XOR<UserRelationFilter, UserWhereInput>
    requests?: BudgetRequestListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    chefId?: SortOrder
    totalBudget?: SortOrder
    usedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chef?: UserOrderByWithRelationInput
    requests?: BudgetRequestOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    chefId?: StringFilter<"Department"> | string
    totalBudget?: FloatFilter<"Department"> | number
    usedBudget?: FloatFilter<"Department"> | number
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    chef?: XOR<UserRelationFilter, UserWhereInput>
    requests?: BudgetRequestListRelationFilter
  }, "id" | "name" | "code">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    chefId?: SortOrder
    totalBudget?: SortOrder
    usedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    code?: StringWithAggregatesFilter<"Department"> | string
    chefId?: StringWithAggregatesFilter<"Department"> | string
    totalBudget?: FloatWithAggregatesFilter<"Department"> | number
    usedBudget?: FloatWithAggregatesFilter<"Department"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type BudgetRequestWhereInput = {
    AND?: BudgetRequestWhereInput | BudgetRequestWhereInput[]
    OR?: BudgetRequestWhereInput[]
    NOT?: BudgetRequestWhereInput | BudgetRequestWhereInput[]
    id?: StringFilter<"BudgetRequest"> | string
    agentId?: StringFilter<"BudgetRequest"> | string
    agentName?: StringFilter<"BudgetRequest"> | string
    department?: StringFilter<"BudgetRequest"> | string
    category?: StringFilter<"BudgetRequest"> | string
    title?: StringFilter<"BudgetRequest"> | string
    description?: StringFilter<"BudgetRequest"> | string
    amount?: FloatFilter<"BudgetRequest"> | number
    justification?: StringFilter<"BudgetRequest"> | string
    accountCode?: StringNullableFilter<"BudgetRequest"> | string | null
    urgency?: EnumUrgencyLevelFilter<"BudgetRequest"> | $Enums.UrgencyLevel
    attachments?: StringNullableListFilter<"BudgetRequest">
    status?: EnumRequestStatusFilter<"BudgetRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"BudgetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BudgetRequest"> | Date | string
    validatedBy?: StringNullableFilter<"BudgetRequest"> | string | null
    validatedAt?: DateTimeNullableFilter<"BudgetRequest"> | Date | string | null
    agent?: XOR<UserRelationFilter, UserWhereInput>
    validator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    dept?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    comments?: CommentListRelationFilter
    items?: RequestItemListRelationFilter
    executions?: BudgetExecutionListRelationFilter
  }

  export type BudgetRequestOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    agentName?: SortOrder
    department?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    justification?: SortOrder
    accountCode?: SortOrderInput | SortOrder
    urgency?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validatedBy?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    agent?: UserOrderByWithRelationInput
    validator?: UserOrderByWithRelationInput
    dept?: DepartmentOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    items?: RequestItemOrderByRelationAggregateInput
    executions?: BudgetExecutionOrderByRelationAggregateInput
  }

  export type BudgetRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BudgetRequestWhereInput | BudgetRequestWhereInput[]
    OR?: BudgetRequestWhereInput[]
    NOT?: BudgetRequestWhereInput | BudgetRequestWhereInput[]
    agentId?: StringFilter<"BudgetRequest"> | string
    agentName?: StringFilter<"BudgetRequest"> | string
    department?: StringFilter<"BudgetRequest"> | string
    category?: StringFilter<"BudgetRequest"> | string
    title?: StringFilter<"BudgetRequest"> | string
    description?: StringFilter<"BudgetRequest"> | string
    amount?: FloatFilter<"BudgetRequest"> | number
    justification?: StringFilter<"BudgetRequest"> | string
    accountCode?: StringNullableFilter<"BudgetRequest"> | string | null
    urgency?: EnumUrgencyLevelFilter<"BudgetRequest"> | $Enums.UrgencyLevel
    attachments?: StringNullableListFilter<"BudgetRequest">
    status?: EnumRequestStatusFilter<"BudgetRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"BudgetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BudgetRequest"> | Date | string
    validatedBy?: StringNullableFilter<"BudgetRequest"> | string | null
    validatedAt?: DateTimeNullableFilter<"BudgetRequest"> | Date | string | null
    agent?: XOR<UserRelationFilter, UserWhereInput>
    validator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    dept?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    comments?: CommentListRelationFilter
    items?: RequestItemListRelationFilter
    executions?: BudgetExecutionListRelationFilter
  }, "id">

  export type BudgetRequestOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    agentName?: SortOrder
    department?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    justification?: SortOrder
    accountCode?: SortOrderInput | SortOrder
    urgency?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validatedBy?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    _count?: BudgetRequestCountOrderByAggregateInput
    _avg?: BudgetRequestAvgOrderByAggregateInput
    _max?: BudgetRequestMaxOrderByAggregateInput
    _min?: BudgetRequestMinOrderByAggregateInput
    _sum?: BudgetRequestSumOrderByAggregateInput
  }

  export type BudgetRequestScalarWhereWithAggregatesInput = {
    AND?: BudgetRequestScalarWhereWithAggregatesInput | BudgetRequestScalarWhereWithAggregatesInput[]
    OR?: BudgetRequestScalarWhereWithAggregatesInput[]
    NOT?: BudgetRequestScalarWhereWithAggregatesInput | BudgetRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BudgetRequest"> | string
    agentId?: StringWithAggregatesFilter<"BudgetRequest"> | string
    agentName?: StringWithAggregatesFilter<"BudgetRequest"> | string
    department?: StringWithAggregatesFilter<"BudgetRequest"> | string
    category?: StringWithAggregatesFilter<"BudgetRequest"> | string
    title?: StringWithAggregatesFilter<"BudgetRequest"> | string
    description?: StringWithAggregatesFilter<"BudgetRequest"> | string
    amount?: FloatWithAggregatesFilter<"BudgetRequest"> | number
    justification?: StringWithAggregatesFilter<"BudgetRequest"> | string
    accountCode?: StringNullableWithAggregatesFilter<"BudgetRequest"> | string | null
    urgency?: EnumUrgencyLevelWithAggregatesFilter<"BudgetRequest"> | $Enums.UrgencyLevel
    attachments?: StringNullableListFilter<"BudgetRequest">
    status?: EnumRequestStatusWithAggregatesFilter<"BudgetRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeWithAggregatesFilter<"BudgetRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BudgetRequest"> | Date | string
    validatedBy?: StringNullableWithAggregatesFilter<"BudgetRequest"> | string | null
    validatedAt?: DateTimeNullableWithAggregatesFilter<"BudgetRequest"> | Date | string | null
  }

  export type RequestItemWhereInput = {
    AND?: RequestItemWhereInput | RequestItemWhereInput[]
    OR?: RequestItemWhereInput[]
    NOT?: RequestItemWhereInput | RequestItemWhereInput[]
    id?: StringFilter<"RequestItem"> | string
    requestId?: StringFilter<"RequestItem"> | string
    description?: StringFilter<"RequestItem"> | string
    quantity?: IntFilter<"RequestItem"> | number
    unitPrice?: FloatFilter<"RequestItem"> | number
    totalPrice?: FloatFilter<"RequestItem"> | number
    createdAt?: DateTimeFilter<"RequestItem"> | Date | string
    request?: XOR<BudgetRequestRelationFilter, BudgetRequestWhereInput>
  }

  export type RequestItemOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    request?: BudgetRequestOrderByWithRelationInput
  }

  export type RequestItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RequestItemWhereInput | RequestItemWhereInput[]
    OR?: RequestItemWhereInput[]
    NOT?: RequestItemWhereInput | RequestItemWhereInput[]
    requestId?: StringFilter<"RequestItem"> | string
    description?: StringFilter<"RequestItem"> | string
    quantity?: IntFilter<"RequestItem"> | number
    unitPrice?: FloatFilter<"RequestItem"> | number
    totalPrice?: FloatFilter<"RequestItem"> | number
    createdAt?: DateTimeFilter<"RequestItem"> | Date | string
    request?: XOR<BudgetRequestRelationFilter, BudgetRequestWhereInput>
  }, "id">

  export type RequestItemOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    _count?: RequestItemCountOrderByAggregateInput
    _avg?: RequestItemAvgOrderByAggregateInput
    _max?: RequestItemMaxOrderByAggregateInput
    _min?: RequestItemMinOrderByAggregateInput
    _sum?: RequestItemSumOrderByAggregateInput
  }

  export type RequestItemScalarWhereWithAggregatesInput = {
    AND?: RequestItemScalarWhereWithAggregatesInput | RequestItemScalarWhereWithAggregatesInput[]
    OR?: RequestItemScalarWhereWithAggregatesInput[]
    NOT?: RequestItemScalarWhereWithAggregatesInput | RequestItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RequestItem"> | string
    requestId?: StringWithAggregatesFilter<"RequestItem"> | string
    description?: StringWithAggregatesFilter<"RequestItem"> | string
    quantity?: IntWithAggregatesFilter<"RequestItem"> | number
    unitPrice?: FloatWithAggregatesFilter<"RequestItem"> | number
    totalPrice?: FloatWithAggregatesFilter<"RequestItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RequestItem"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    requestId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    userName?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    request?: XOR<BudgetRequestRelationFilter, BudgetRequestWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    request?: BudgetRequestOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    requestId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    userName?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    request?: XOR<BudgetRequestRelationFilter, BudgetRequestWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    requestId?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    userName?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    userName?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    userName?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    userName?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: StringWithAggregatesFilter<"AuditLog"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type BudgetExecutionWhereInput = {
    AND?: BudgetExecutionWhereInput | BudgetExecutionWhereInput[]
    OR?: BudgetExecutionWhereInput[]
    NOT?: BudgetExecutionWhereInput | BudgetExecutionWhereInput[]
    id?: StringFilter<"BudgetExecution"> | string
    requestId?: StringFilter<"BudgetExecution"> | string
    supplierId?: StringFilter<"BudgetExecution"> | string
    supplierName?: StringFilter<"BudgetExecution"> | string
    invoiceNumber?: StringFilter<"BudgetExecution"> | string
    invoiceDate?: DateTimeFilter<"BudgetExecution"> | Date | string
    amount?: FloatFilter<"BudgetExecution"> | number
    status?: EnumExecutionStatusFilter<"BudgetExecution"> | $Enums.ExecutionStatus
    paymentDate?: DateTimeNullableFilter<"BudgetExecution"> | Date | string | null
    deliveryDate?: DateTimeNullableFilter<"BudgetExecution"> | Date | string | null
    receivedBy?: StringNullableFilter<"BudgetExecution"> | string | null
    createdAt?: DateTimeFilter<"BudgetExecution"> | Date | string
    updatedAt?: DateTimeFilter<"BudgetExecution"> | Date | string
    request?: XOR<BudgetRequestRelationFilter, BudgetRequestWhereInput>
  }

  export type BudgetExecutionOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    supplierId?: SortOrder
    supplierName?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentDate?: SortOrderInput | SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    receivedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    request?: BudgetRequestOrderByWithRelationInput
  }

  export type BudgetExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BudgetExecutionWhereInput | BudgetExecutionWhereInput[]
    OR?: BudgetExecutionWhereInput[]
    NOT?: BudgetExecutionWhereInput | BudgetExecutionWhereInput[]
    requestId?: StringFilter<"BudgetExecution"> | string
    supplierId?: StringFilter<"BudgetExecution"> | string
    supplierName?: StringFilter<"BudgetExecution"> | string
    invoiceNumber?: StringFilter<"BudgetExecution"> | string
    invoiceDate?: DateTimeFilter<"BudgetExecution"> | Date | string
    amount?: FloatFilter<"BudgetExecution"> | number
    status?: EnumExecutionStatusFilter<"BudgetExecution"> | $Enums.ExecutionStatus
    paymentDate?: DateTimeNullableFilter<"BudgetExecution"> | Date | string | null
    deliveryDate?: DateTimeNullableFilter<"BudgetExecution"> | Date | string | null
    receivedBy?: StringNullableFilter<"BudgetExecution"> | string | null
    createdAt?: DateTimeFilter<"BudgetExecution"> | Date | string
    updatedAt?: DateTimeFilter<"BudgetExecution"> | Date | string
    request?: XOR<BudgetRequestRelationFilter, BudgetRequestWhereInput>
  }, "id">

  export type BudgetExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    supplierId?: SortOrder
    supplierName?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentDate?: SortOrderInput | SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    receivedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BudgetExecutionCountOrderByAggregateInput
    _avg?: BudgetExecutionAvgOrderByAggregateInput
    _max?: BudgetExecutionMaxOrderByAggregateInput
    _min?: BudgetExecutionMinOrderByAggregateInput
    _sum?: BudgetExecutionSumOrderByAggregateInput
  }

  export type BudgetExecutionScalarWhereWithAggregatesInput = {
    AND?: BudgetExecutionScalarWhereWithAggregatesInput | BudgetExecutionScalarWhereWithAggregatesInput[]
    OR?: BudgetExecutionScalarWhereWithAggregatesInput[]
    NOT?: BudgetExecutionScalarWhereWithAggregatesInput | BudgetExecutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BudgetExecution"> | string
    requestId?: StringWithAggregatesFilter<"BudgetExecution"> | string
    supplierId?: StringWithAggregatesFilter<"BudgetExecution"> | string
    supplierName?: StringWithAggregatesFilter<"BudgetExecution"> | string
    invoiceNumber?: StringWithAggregatesFilter<"BudgetExecution"> | string
    invoiceDate?: DateTimeWithAggregatesFilter<"BudgetExecution"> | Date | string
    amount?: FloatWithAggregatesFilter<"BudgetExecution"> | number
    status?: EnumExecutionStatusWithAggregatesFilter<"BudgetExecution"> | $Enums.ExecutionStatus
    paymentDate?: DateTimeNullableWithAggregatesFilter<"BudgetExecution"> | Date | string | null
    deliveryDate?: DateTimeNullableWithAggregatesFilter<"BudgetExecution"> | Date | string | null
    receivedBy?: StringNullableWithAggregatesFilter<"BudgetExecution"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BudgetExecution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BudgetExecution"> | Date | string
  }

  export type OhadaAccountWhereInput = {
    AND?: OhadaAccountWhereInput | OhadaAccountWhereInput[]
    OR?: OhadaAccountWhereInput[]
    NOT?: OhadaAccountWhereInput | OhadaAccountWhereInput[]
    code?: StringFilter<"OhadaAccount"> | string
    name?: StringFilter<"OhadaAccount"> | string
    category?: StringFilter<"OhadaAccount"> | string
    description?: StringFilter<"OhadaAccount"> | string
    isActive?: BoolFilter<"OhadaAccount"> | boolean
    createdAt?: DateTimeFilter<"OhadaAccount"> | Date | string
    updatedAt?: DateTimeFilter<"OhadaAccount"> | Date | string
  }

  export type OhadaAccountOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OhadaAccountWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: OhadaAccountWhereInput | OhadaAccountWhereInput[]
    OR?: OhadaAccountWhereInput[]
    NOT?: OhadaAccountWhereInput | OhadaAccountWhereInput[]
    name?: StringFilter<"OhadaAccount"> | string
    category?: StringFilter<"OhadaAccount"> | string
    description?: StringFilter<"OhadaAccount"> | string
    isActive?: BoolFilter<"OhadaAccount"> | boolean
    createdAt?: DateTimeFilter<"OhadaAccount"> | Date | string
    updatedAt?: DateTimeFilter<"OhadaAccount"> | Date | string
  }, "code">

  export type OhadaAccountOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OhadaAccountCountOrderByAggregateInput
    _max?: OhadaAccountMaxOrderByAggregateInput
    _min?: OhadaAccountMinOrderByAggregateInput
  }

  export type OhadaAccountScalarWhereWithAggregatesInput = {
    AND?: OhadaAccountScalarWhereWithAggregatesInput | OhadaAccountScalarWhereWithAggregatesInput[]
    OR?: OhadaAccountScalarWhereWithAggregatesInput[]
    NOT?: OhadaAccountScalarWhereWithAggregatesInput | OhadaAccountScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"OhadaAccount"> | string
    name?: StringWithAggregatesFilter<"OhadaAccount"> | string
    category?: StringWithAggregatesFilter<"OhadaAccount"> | string
    description?: StringWithAggregatesFilter<"OhadaAccount"> | string
    isActive?: BoolWithAggregatesFilter<"OhadaAccount"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"OhadaAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OhadaAccount"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestCreateNestedManyWithoutValidatorInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    departments?: DepartmentCreateNestedManyWithoutChefInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestUncheckedCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestUncheckedCreateNestedManyWithoutValidatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutChefInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUpdateManyWithoutValidatorNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    departments?: DepartmentUpdateManyWithoutChefNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUncheckedUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUncheckedUpdateManyWithoutValidatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutChefNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    code: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chef: UserCreateNestedOneWithoutDepartmentsInput
    requests?: BudgetRequestCreateNestedManyWithoutDeptInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    chefId: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    requests?: BudgetRequestUncheckedCreateNestedManyWithoutDeptInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chef?: UserUpdateOneRequiredWithoutDepartmentsNestedInput
    requests?: BudgetRequestUpdateManyWithoutDeptNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    chefId?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requests?: BudgetRequestUncheckedUpdateManyWithoutDeptNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    code: string
    chefId: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    chefId?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetRequestCreateInput = {
    id?: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    agent: UserCreateNestedOneWithoutBudgetRequestsInput
    validator?: UserCreateNestedOneWithoutValidatedRequestsInput
    dept?: DepartmentCreateNestedOneWithoutRequestsInput
    comments?: CommentCreateNestedManyWithoutRequestInput
    items?: RequestItemCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUncheckedCreateInput = {
    id?: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
    comments?: CommentUncheckedCreateNestedManyWithoutRequestInput
    items?: RequestItemUncheckedCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: UserUpdateOneRequiredWithoutBudgetRequestsNestedInput
    validator?: UserUpdateOneWithoutValidatedRequestsNestedInput
    dept?: DepartmentUpdateOneWithoutRequestsNestedInput
    comments?: CommentUpdateManyWithoutRequestNestedInput
    items?: RequestItemUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: CommentUncheckedUpdateManyWithoutRequestNestedInput
    items?: RequestItemUncheckedUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestCreateManyInput = {
    id?: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
  }

  export type BudgetRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BudgetRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RequestItemCreateInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    request: BudgetRequestCreateNestedOneWithoutItemsInput
  }

  export type RequestItemUncheckedCreateInput = {
    id?: string
    requestId: string
    description: string
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type RequestItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: BudgetRequestUpdateOneRequiredWithoutItemsNestedInput
  }

  export type RequestItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestItemCreateManyInput = {
    id?: string
    requestId: string
    description: string
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type RequestItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    userName: string
    content: string
    createdAt?: Date | string
    request: BudgetRequestCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    requestId: string
    userId: string
    userName: string
    content: string
    createdAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: BudgetRequestUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    requestId: string
    userId: string
    userName: string
    content: string
    createdAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    userName: string
    action: string
    entity: string
    entityId: string
    details: string
    ipAddress?: string | null
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    userName: string
    action: string
    entity: string
    entityId: string
    details: string
    ipAddress?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    userName: string
    action: string
    entity: string
    entityId: string
    details: string
    ipAddress?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetExecutionCreateInput = {
    id?: string
    supplierId: string
    supplierName: string
    invoiceNumber: string
    invoiceDate: Date | string
    amount: number
    status?: $Enums.ExecutionStatus
    paymentDate?: Date | string | null
    deliveryDate?: Date | string | null
    receivedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    request: BudgetRequestCreateNestedOneWithoutExecutionsInput
  }

  export type BudgetExecutionUncheckedCreateInput = {
    id?: string
    requestId: string
    supplierId: string
    supplierName: string
    invoiceNumber: string
    invoiceDate: Date | string
    amount: number
    status?: $Enums.ExecutionStatus
    paymentDate?: Date | string | null
    deliveryDate?: Date | string | null
    receivedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    supplierName?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumExecutionStatusFieldUpdateOperationsInput | $Enums.ExecutionStatus
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: BudgetRequestUpdateOneRequiredWithoutExecutionsNestedInput
  }

  export type BudgetExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    supplierName?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumExecutionStatusFieldUpdateOperationsInput | $Enums.ExecutionStatus
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetExecutionCreateManyInput = {
    id?: string
    requestId: string
    supplierId: string
    supplierName: string
    invoiceNumber: string
    invoiceDate: Date | string
    amount: number
    status?: $Enums.ExecutionStatus
    paymentDate?: Date | string | null
    deliveryDate?: Date | string | null
    receivedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    supplierName?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumExecutionStatusFieldUpdateOperationsInput | $Enums.ExecutionStatus
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    supplierName?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumExecutionStatusFieldUpdateOperationsInput | $Enums.ExecutionStatus
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OhadaAccountCreateInput = {
    code: string
    name: string
    category: string
    description: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OhadaAccountUncheckedCreateInput = {
    code: string
    name: string
    category: string
    description: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OhadaAccountUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OhadaAccountUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OhadaAccountCreateManyInput = {
    code: string
    name: string
    category: string
    description: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OhadaAccountUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OhadaAccountUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BudgetRequestListRelationFilter = {
    every?: BudgetRequestWhereInput
    some?: BudgetRequestWhereInput
    none?: BudgetRequestWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BudgetRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    chefId?: SortOrder
    totalBudget?: SortOrder
    usedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    totalBudget?: SortOrder
    usedBudget?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    chefId?: SortOrder
    totalBudget?: SortOrder
    usedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    chefId?: SortOrder
    totalBudget?: SortOrder
    usedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    totalBudget?: SortOrder
    usedBudget?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumUrgencyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.UrgencyLevel | EnumUrgencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUrgencyLevelFilter<$PrismaModel> | $Enums.UrgencyLevel
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type RequestItemListRelationFilter = {
    every?: RequestItemWhereInput
    some?: RequestItemWhereInput
    none?: RequestItemWhereInput
  }

  export type BudgetExecutionListRelationFilter = {
    every?: BudgetExecutionWhereInput
    some?: BudgetExecutionWhereInput
    none?: BudgetExecutionWhereInput
  }

  export type RequestItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BudgetExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BudgetRequestCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    agentName?: SortOrder
    department?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    justification?: SortOrder
    accountCode?: SortOrder
    urgency?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validatedBy?: SortOrder
    validatedAt?: SortOrder
  }

  export type BudgetRequestAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BudgetRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    agentName?: SortOrder
    department?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    justification?: SortOrder
    accountCode?: SortOrder
    urgency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validatedBy?: SortOrder
    validatedAt?: SortOrder
  }

  export type BudgetRequestMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    agentName?: SortOrder
    department?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    justification?: SortOrder
    accountCode?: SortOrder
    urgency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validatedBy?: SortOrder
    validatedAt?: SortOrder
  }

  export type BudgetRequestSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumUrgencyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UrgencyLevel | EnumUrgencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUrgencyLevelWithAggregatesFilter<$PrismaModel> | $Enums.UrgencyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUrgencyLevelFilter<$PrismaModel>
    _max?: NestedEnumUrgencyLevelFilter<$PrismaModel>
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BudgetRequestRelationFilter = {
    is?: BudgetRequestWhereInput
    isNot?: BudgetRequestWhereInput
  }

  export type RequestItemCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type RequestItemMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestItemMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumExecutionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ExecutionStatus | EnumExecutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExecutionStatusFilter<$PrismaModel> | $Enums.ExecutionStatus
  }

  export type BudgetExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    supplierId?: SortOrder
    supplierName?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentDate?: SortOrder
    deliveryDate?: SortOrder
    receivedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BudgetExecutionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BudgetExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    supplierId?: SortOrder
    supplierName?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentDate?: SortOrder
    deliveryDate?: SortOrder
    receivedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BudgetExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    supplierId?: SortOrder
    supplierName?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentDate?: SortOrder
    deliveryDate?: SortOrder
    receivedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BudgetExecutionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumExecutionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExecutionStatus | EnumExecutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExecutionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ExecutionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExecutionStatusFilter<$PrismaModel>
    _max?: NestedEnumExecutionStatusFilter<$PrismaModel>
  }

  export type OhadaAccountCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OhadaAccountMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OhadaAccountMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BudgetRequestCreateNestedManyWithoutAgentInput = {
    create?: XOR<BudgetRequestCreateWithoutAgentInput, BudgetRequestUncheckedCreateWithoutAgentInput> | BudgetRequestCreateWithoutAgentInput[] | BudgetRequestUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutAgentInput | BudgetRequestCreateOrConnectWithoutAgentInput[]
    createMany?: BudgetRequestCreateManyAgentInputEnvelope
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
  }

  export type BudgetRequestCreateNestedManyWithoutValidatorInput = {
    create?: XOR<BudgetRequestCreateWithoutValidatorInput, BudgetRequestUncheckedCreateWithoutValidatorInput> | BudgetRequestCreateWithoutValidatorInput[] | BudgetRequestUncheckedCreateWithoutValidatorInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutValidatorInput | BudgetRequestCreateOrConnectWithoutValidatorInput[]
    createMany?: BudgetRequestCreateManyValidatorInputEnvelope
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutChefInput = {
    create?: XOR<DepartmentCreateWithoutChefInput, DepartmentUncheckedCreateWithoutChefInput> | DepartmentCreateWithoutChefInput[] | DepartmentUncheckedCreateWithoutChefInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutChefInput | DepartmentCreateOrConnectWithoutChefInput[]
    createMany?: DepartmentCreateManyChefInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type BudgetRequestUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<BudgetRequestCreateWithoutAgentInput, BudgetRequestUncheckedCreateWithoutAgentInput> | BudgetRequestCreateWithoutAgentInput[] | BudgetRequestUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutAgentInput | BudgetRequestCreateOrConnectWithoutAgentInput[]
    createMany?: BudgetRequestCreateManyAgentInputEnvelope
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
  }

  export type BudgetRequestUncheckedCreateNestedManyWithoutValidatorInput = {
    create?: XOR<BudgetRequestCreateWithoutValidatorInput, BudgetRequestUncheckedCreateWithoutValidatorInput> | BudgetRequestCreateWithoutValidatorInput[] | BudgetRequestUncheckedCreateWithoutValidatorInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutValidatorInput | BudgetRequestCreateOrConnectWithoutValidatorInput[]
    createMany?: BudgetRequestCreateManyValidatorInputEnvelope
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutChefInput = {
    create?: XOR<DepartmentCreateWithoutChefInput, DepartmentUncheckedCreateWithoutChefInput> | DepartmentCreateWithoutChefInput[] | DepartmentUncheckedCreateWithoutChefInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutChefInput | DepartmentCreateOrConnectWithoutChefInput[]
    createMany?: DepartmentCreateManyChefInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BudgetRequestUpdateManyWithoutAgentNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutAgentInput, BudgetRequestUncheckedCreateWithoutAgentInput> | BudgetRequestCreateWithoutAgentInput[] | BudgetRequestUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutAgentInput | BudgetRequestCreateOrConnectWithoutAgentInput[]
    upsert?: BudgetRequestUpsertWithWhereUniqueWithoutAgentInput | BudgetRequestUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: BudgetRequestCreateManyAgentInputEnvelope
    set?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    disconnect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    delete?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    update?: BudgetRequestUpdateWithWhereUniqueWithoutAgentInput | BudgetRequestUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: BudgetRequestUpdateManyWithWhereWithoutAgentInput | BudgetRequestUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
  }

  export type BudgetRequestUpdateManyWithoutValidatorNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutValidatorInput, BudgetRequestUncheckedCreateWithoutValidatorInput> | BudgetRequestCreateWithoutValidatorInput[] | BudgetRequestUncheckedCreateWithoutValidatorInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutValidatorInput | BudgetRequestCreateOrConnectWithoutValidatorInput[]
    upsert?: BudgetRequestUpsertWithWhereUniqueWithoutValidatorInput | BudgetRequestUpsertWithWhereUniqueWithoutValidatorInput[]
    createMany?: BudgetRequestCreateManyValidatorInputEnvelope
    set?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    disconnect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    delete?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    update?: BudgetRequestUpdateWithWhereUniqueWithoutValidatorInput | BudgetRequestUpdateWithWhereUniqueWithoutValidatorInput[]
    updateMany?: BudgetRequestUpdateManyWithWhereWithoutValidatorInput | BudgetRequestUpdateManyWithWhereWithoutValidatorInput[]
    deleteMany?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutChefNestedInput = {
    create?: XOR<DepartmentCreateWithoutChefInput, DepartmentUncheckedCreateWithoutChefInput> | DepartmentCreateWithoutChefInput[] | DepartmentUncheckedCreateWithoutChefInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutChefInput | DepartmentCreateOrConnectWithoutChefInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutChefInput | DepartmentUpsertWithWhereUniqueWithoutChefInput[]
    createMany?: DepartmentCreateManyChefInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutChefInput | DepartmentUpdateWithWhereUniqueWithoutChefInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutChefInput | DepartmentUpdateManyWithWhereWithoutChefInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type BudgetRequestUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutAgentInput, BudgetRequestUncheckedCreateWithoutAgentInput> | BudgetRequestCreateWithoutAgentInput[] | BudgetRequestUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutAgentInput | BudgetRequestCreateOrConnectWithoutAgentInput[]
    upsert?: BudgetRequestUpsertWithWhereUniqueWithoutAgentInput | BudgetRequestUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: BudgetRequestCreateManyAgentInputEnvelope
    set?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    disconnect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    delete?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    update?: BudgetRequestUpdateWithWhereUniqueWithoutAgentInput | BudgetRequestUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: BudgetRequestUpdateManyWithWhereWithoutAgentInput | BudgetRequestUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
  }

  export type BudgetRequestUncheckedUpdateManyWithoutValidatorNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutValidatorInput, BudgetRequestUncheckedCreateWithoutValidatorInput> | BudgetRequestCreateWithoutValidatorInput[] | BudgetRequestUncheckedCreateWithoutValidatorInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutValidatorInput | BudgetRequestCreateOrConnectWithoutValidatorInput[]
    upsert?: BudgetRequestUpsertWithWhereUniqueWithoutValidatorInput | BudgetRequestUpsertWithWhereUniqueWithoutValidatorInput[]
    createMany?: BudgetRequestCreateManyValidatorInputEnvelope
    set?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    disconnect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    delete?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    update?: BudgetRequestUpdateWithWhereUniqueWithoutValidatorInput | BudgetRequestUpdateWithWhereUniqueWithoutValidatorInput[]
    updateMany?: BudgetRequestUpdateManyWithWhereWithoutValidatorInput | BudgetRequestUpdateManyWithWhereWithoutValidatorInput[]
    deleteMany?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutChefNestedInput = {
    create?: XOR<DepartmentCreateWithoutChefInput, DepartmentUncheckedCreateWithoutChefInput> | DepartmentCreateWithoutChefInput[] | DepartmentUncheckedCreateWithoutChefInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutChefInput | DepartmentCreateOrConnectWithoutChefInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutChefInput | DepartmentUpsertWithWhereUniqueWithoutChefInput[]
    createMany?: DepartmentCreateManyChefInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutChefInput | DepartmentUpdateWithWhereUniqueWithoutChefInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutChefInput | DepartmentUpdateManyWithWhereWithoutChefInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type BudgetRequestCreateNestedManyWithoutDeptInput = {
    create?: XOR<BudgetRequestCreateWithoutDeptInput, BudgetRequestUncheckedCreateWithoutDeptInput> | BudgetRequestCreateWithoutDeptInput[] | BudgetRequestUncheckedCreateWithoutDeptInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutDeptInput | BudgetRequestCreateOrConnectWithoutDeptInput[]
    createMany?: BudgetRequestCreateManyDeptInputEnvelope
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
  }

  export type BudgetRequestUncheckedCreateNestedManyWithoutDeptInput = {
    create?: XOR<BudgetRequestCreateWithoutDeptInput, BudgetRequestUncheckedCreateWithoutDeptInput> | BudgetRequestCreateWithoutDeptInput[] | BudgetRequestUncheckedCreateWithoutDeptInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutDeptInput | BudgetRequestCreateOrConnectWithoutDeptInput[]
    createMany?: BudgetRequestCreateManyDeptInputEnvelope
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentsInput
    upsert?: UserUpsertWithoutDepartmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDepartmentsInput, UserUpdateWithoutDepartmentsInput>, UserUncheckedUpdateWithoutDepartmentsInput>
  }

  export type BudgetRequestUpdateManyWithoutDeptNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutDeptInput, BudgetRequestUncheckedCreateWithoutDeptInput> | BudgetRequestCreateWithoutDeptInput[] | BudgetRequestUncheckedCreateWithoutDeptInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutDeptInput | BudgetRequestCreateOrConnectWithoutDeptInput[]
    upsert?: BudgetRequestUpsertWithWhereUniqueWithoutDeptInput | BudgetRequestUpsertWithWhereUniqueWithoutDeptInput[]
    createMany?: BudgetRequestCreateManyDeptInputEnvelope
    set?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    disconnect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    delete?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    update?: BudgetRequestUpdateWithWhereUniqueWithoutDeptInput | BudgetRequestUpdateWithWhereUniqueWithoutDeptInput[]
    updateMany?: BudgetRequestUpdateManyWithWhereWithoutDeptInput | BudgetRequestUpdateManyWithWhereWithoutDeptInput[]
    deleteMany?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
  }

  export type BudgetRequestUncheckedUpdateManyWithoutDeptNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutDeptInput, BudgetRequestUncheckedCreateWithoutDeptInput> | BudgetRequestCreateWithoutDeptInput[] | BudgetRequestUncheckedCreateWithoutDeptInput[]
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutDeptInput | BudgetRequestCreateOrConnectWithoutDeptInput[]
    upsert?: BudgetRequestUpsertWithWhereUniqueWithoutDeptInput | BudgetRequestUpsertWithWhereUniqueWithoutDeptInput[]
    createMany?: BudgetRequestCreateManyDeptInputEnvelope
    set?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    disconnect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    delete?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    connect?: BudgetRequestWhereUniqueInput | BudgetRequestWhereUniqueInput[]
    update?: BudgetRequestUpdateWithWhereUniqueWithoutDeptInput | BudgetRequestUpdateWithWhereUniqueWithoutDeptInput[]
    updateMany?: BudgetRequestUpdateManyWithWhereWithoutDeptInput | BudgetRequestUpdateManyWithWhereWithoutDeptInput[]
    deleteMany?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
  }

  export type BudgetRequestCreateattachmentsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutBudgetRequestsInput = {
    create?: XOR<UserCreateWithoutBudgetRequestsInput, UserUncheckedCreateWithoutBudgetRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBudgetRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutValidatedRequestsInput = {
    create?: XOR<UserCreateWithoutValidatedRequestsInput, UserUncheckedCreateWithoutValidatedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidatedRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutRequestsInput = {
    create?: XOR<DepartmentCreateWithoutRequestsInput, DepartmentUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutRequestsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutRequestInput = {
    create?: XOR<CommentCreateWithoutRequestInput, CommentUncheckedCreateWithoutRequestInput> | CommentCreateWithoutRequestInput[] | CommentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutRequestInput | CommentCreateOrConnectWithoutRequestInput[]
    createMany?: CommentCreateManyRequestInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type RequestItemCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestItemCreateWithoutRequestInput, RequestItemUncheckedCreateWithoutRequestInput> | RequestItemCreateWithoutRequestInput[] | RequestItemUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestItemCreateOrConnectWithoutRequestInput | RequestItemCreateOrConnectWithoutRequestInput[]
    createMany?: RequestItemCreateManyRequestInputEnvelope
    connect?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
  }

  export type BudgetExecutionCreateNestedManyWithoutRequestInput = {
    create?: XOR<BudgetExecutionCreateWithoutRequestInput, BudgetExecutionUncheckedCreateWithoutRequestInput> | BudgetExecutionCreateWithoutRequestInput[] | BudgetExecutionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: BudgetExecutionCreateOrConnectWithoutRequestInput | BudgetExecutionCreateOrConnectWithoutRequestInput[]
    createMany?: BudgetExecutionCreateManyRequestInputEnvelope
    connect?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<CommentCreateWithoutRequestInput, CommentUncheckedCreateWithoutRequestInput> | CommentCreateWithoutRequestInput[] | CommentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutRequestInput | CommentCreateOrConnectWithoutRequestInput[]
    createMany?: CommentCreateManyRequestInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type RequestItemUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestItemCreateWithoutRequestInput, RequestItemUncheckedCreateWithoutRequestInput> | RequestItemCreateWithoutRequestInput[] | RequestItemUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestItemCreateOrConnectWithoutRequestInput | RequestItemCreateOrConnectWithoutRequestInput[]
    createMany?: RequestItemCreateManyRequestInputEnvelope
    connect?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
  }

  export type BudgetExecutionUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<BudgetExecutionCreateWithoutRequestInput, BudgetExecutionUncheckedCreateWithoutRequestInput> | BudgetExecutionCreateWithoutRequestInput[] | BudgetExecutionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: BudgetExecutionCreateOrConnectWithoutRequestInput | BudgetExecutionCreateOrConnectWithoutRequestInput[]
    createMany?: BudgetExecutionCreateManyRequestInputEnvelope
    connect?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
  }

  export type EnumUrgencyLevelFieldUpdateOperationsInput = {
    set?: $Enums.UrgencyLevel
  }

  export type BudgetRequestUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type UserUpdateOneRequiredWithoutBudgetRequestsNestedInput = {
    create?: XOR<UserCreateWithoutBudgetRequestsInput, UserUncheckedCreateWithoutBudgetRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBudgetRequestsInput
    upsert?: UserUpsertWithoutBudgetRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBudgetRequestsInput, UserUpdateWithoutBudgetRequestsInput>, UserUncheckedUpdateWithoutBudgetRequestsInput>
  }

  export type UserUpdateOneWithoutValidatedRequestsNestedInput = {
    create?: XOR<UserCreateWithoutValidatedRequestsInput, UserUncheckedCreateWithoutValidatedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidatedRequestsInput
    upsert?: UserUpsertWithoutValidatedRequestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutValidatedRequestsInput, UserUpdateWithoutValidatedRequestsInput>, UserUncheckedUpdateWithoutValidatedRequestsInput>
  }

  export type DepartmentUpdateOneWithoutRequestsNestedInput = {
    create?: XOR<DepartmentCreateWithoutRequestsInput, DepartmentUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutRequestsInput
    upsert?: DepartmentUpsertWithoutRequestsInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutRequestsInput, DepartmentUpdateWithoutRequestsInput>, DepartmentUncheckedUpdateWithoutRequestsInput>
  }

  export type CommentUpdateManyWithoutRequestNestedInput = {
    create?: XOR<CommentCreateWithoutRequestInput, CommentUncheckedCreateWithoutRequestInput> | CommentCreateWithoutRequestInput[] | CommentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutRequestInput | CommentCreateOrConnectWithoutRequestInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutRequestInput | CommentUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: CommentCreateManyRequestInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutRequestInput | CommentUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutRequestInput | CommentUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type RequestItemUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestItemCreateWithoutRequestInput, RequestItemUncheckedCreateWithoutRequestInput> | RequestItemCreateWithoutRequestInput[] | RequestItemUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestItemCreateOrConnectWithoutRequestInput | RequestItemCreateOrConnectWithoutRequestInput[]
    upsert?: RequestItemUpsertWithWhereUniqueWithoutRequestInput | RequestItemUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestItemCreateManyRequestInputEnvelope
    set?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    disconnect?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    delete?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    connect?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    update?: RequestItemUpdateWithWhereUniqueWithoutRequestInput | RequestItemUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestItemUpdateManyWithWhereWithoutRequestInput | RequestItemUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestItemScalarWhereInput | RequestItemScalarWhereInput[]
  }

  export type BudgetExecutionUpdateManyWithoutRequestNestedInput = {
    create?: XOR<BudgetExecutionCreateWithoutRequestInput, BudgetExecutionUncheckedCreateWithoutRequestInput> | BudgetExecutionCreateWithoutRequestInput[] | BudgetExecutionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: BudgetExecutionCreateOrConnectWithoutRequestInput | BudgetExecutionCreateOrConnectWithoutRequestInput[]
    upsert?: BudgetExecutionUpsertWithWhereUniqueWithoutRequestInput | BudgetExecutionUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: BudgetExecutionCreateManyRequestInputEnvelope
    set?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    disconnect?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    delete?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    connect?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    update?: BudgetExecutionUpdateWithWhereUniqueWithoutRequestInput | BudgetExecutionUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: BudgetExecutionUpdateManyWithWhereWithoutRequestInput | BudgetExecutionUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: BudgetExecutionScalarWhereInput | BudgetExecutionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<CommentCreateWithoutRequestInput, CommentUncheckedCreateWithoutRequestInput> | CommentCreateWithoutRequestInput[] | CommentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutRequestInput | CommentCreateOrConnectWithoutRequestInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutRequestInput | CommentUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: CommentCreateManyRequestInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutRequestInput | CommentUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutRequestInput | CommentUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type RequestItemUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestItemCreateWithoutRequestInput, RequestItemUncheckedCreateWithoutRequestInput> | RequestItemCreateWithoutRequestInput[] | RequestItemUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestItemCreateOrConnectWithoutRequestInput | RequestItemCreateOrConnectWithoutRequestInput[]
    upsert?: RequestItemUpsertWithWhereUniqueWithoutRequestInput | RequestItemUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestItemCreateManyRequestInputEnvelope
    set?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    disconnect?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    delete?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    connect?: RequestItemWhereUniqueInput | RequestItemWhereUniqueInput[]
    update?: RequestItemUpdateWithWhereUniqueWithoutRequestInput | RequestItemUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestItemUpdateManyWithWhereWithoutRequestInput | RequestItemUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestItemScalarWhereInput | RequestItemScalarWhereInput[]
  }

  export type BudgetExecutionUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<BudgetExecutionCreateWithoutRequestInput, BudgetExecutionUncheckedCreateWithoutRequestInput> | BudgetExecutionCreateWithoutRequestInput[] | BudgetExecutionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: BudgetExecutionCreateOrConnectWithoutRequestInput | BudgetExecutionCreateOrConnectWithoutRequestInput[]
    upsert?: BudgetExecutionUpsertWithWhereUniqueWithoutRequestInput | BudgetExecutionUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: BudgetExecutionCreateManyRequestInputEnvelope
    set?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    disconnect?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    delete?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    connect?: BudgetExecutionWhereUniqueInput | BudgetExecutionWhereUniqueInput[]
    update?: BudgetExecutionUpdateWithWhereUniqueWithoutRequestInput | BudgetExecutionUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: BudgetExecutionUpdateManyWithWhereWithoutRequestInput | BudgetExecutionUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: BudgetExecutionScalarWhereInput | BudgetExecutionScalarWhereInput[]
  }

  export type BudgetRequestCreateNestedOneWithoutItemsInput = {
    create?: XOR<BudgetRequestCreateWithoutItemsInput, BudgetRequestUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutItemsInput
    connect?: BudgetRequestWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BudgetRequestUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutItemsInput, BudgetRequestUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutItemsInput
    upsert?: BudgetRequestUpsertWithoutItemsInput
    connect?: BudgetRequestWhereUniqueInput
    update?: XOR<XOR<BudgetRequestUpdateToOneWithWhereWithoutItemsInput, BudgetRequestUpdateWithoutItemsInput>, BudgetRequestUncheckedUpdateWithoutItemsInput>
  }

  export type BudgetRequestCreateNestedOneWithoutCommentsInput = {
    create?: XOR<BudgetRequestCreateWithoutCommentsInput, BudgetRequestUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutCommentsInput
    connect?: BudgetRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type BudgetRequestUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutCommentsInput, BudgetRequestUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutCommentsInput
    upsert?: BudgetRequestUpsertWithoutCommentsInput
    connect?: BudgetRequestWhereUniqueInput
    update?: XOR<XOR<BudgetRequestUpdateToOneWithWhereWithoutCommentsInput, BudgetRequestUpdateWithoutCommentsInput>, BudgetRequestUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type BudgetRequestCreateNestedOneWithoutExecutionsInput = {
    create?: XOR<BudgetRequestCreateWithoutExecutionsInput, BudgetRequestUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutExecutionsInput
    connect?: BudgetRequestWhereUniqueInput
  }

  export type EnumExecutionStatusFieldUpdateOperationsInput = {
    set?: $Enums.ExecutionStatus
  }

  export type BudgetRequestUpdateOneRequiredWithoutExecutionsNestedInput = {
    create?: XOR<BudgetRequestCreateWithoutExecutionsInput, BudgetRequestUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: BudgetRequestCreateOrConnectWithoutExecutionsInput
    upsert?: BudgetRequestUpsertWithoutExecutionsInput
    connect?: BudgetRequestWhereUniqueInput
    update?: XOR<XOR<BudgetRequestUpdateToOneWithWhereWithoutExecutionsInput, BudgetRequestUpdateWithoutExecutionsInput>, BudgetRequestUncheckedUpdateWithoutExecutionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumUrgencyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.UrgencyLevel | EnumUrgencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUrgencyLevelFilter<$PrismaModel> | $Enums.UrgencyLevel
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumUrgencyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UrgencyLevel | EnumUrgencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UrgencyLevel[] | ListEnumUrgencyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUrgencyLevelWithAggregatesFilter<$PrismaModel> | $Enums.UrgencyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUrgencyLevelFilter<$PrismaModel>
    _max?: NestedEnumUrgencyLevelFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumExecutionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ExecutionStatus | EnumExecutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExecutionStatusFilter<$PrismaModel> | $Enums.ExecutionStatus
  }

  export type NestedEnumExecutionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExecutionStatus | EnumExecutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExecutionStatus[] | ListEnumExecutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExecutionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ExecutionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExecutionStatusFilter<$PrismaModel>
    _max?: NestedEnumExecutionStatusFilter<$PrismaModel>
  }

  export type BudgetRequestCreateWithoutAgentInput = {
    id?: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    validator?: UserCreateNestedOneWithoutValidatedRequestsInput
    dept?: DepartmentCreateNestedOneWithoutRequestsInput
    comments?: CommentCreateNestedManyWithoutRequestInput
    items?: RequestItemCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUncheckedCreateWithoutAgentInput = {
    id?: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
    comments?: CommentUncheckedCreateNestedManyWithoutRequestInput
    items?: RequestItemUncheckedCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestCreateOrConnectWithoutAgentInput = {
    where: BudgetRequestWhereUniqueInput
    create: XOR<BudgetRequestCreateWithoutAgentInput, BudgetRequestUncheckedCreateWithoutAgentInput>
  }

  export type BudgetRequestCreateManyAgentInputEnvelope = {
    data: BudgetRequestCreateManyAgentInput | BudgetRequestCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type BudgetRequestCreateWithoutValidatorInput = {
    id?: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    agent: UserCreateNestedOneWithoutBudgetRequestsInput
    dept?: DepartmentCreateNestedOneWithoutRequestsInput
    comments?: CommentCreateNestedManyWithoutRequestInput
    items?: RequestItemCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUncheckedCreateWithoutValidatorInput = {
    id?: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    comments?: CommentUncheckedCreateNestedManyWithoutRequestInput
    items?: RequestItemUncheckedCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestCreateOrConnectWithoutValidatorInput = {
    where: BudgetRequestWhereUniqueInput
    create: XOR<BudgetRequestCreateWithoutValidatorInput, BudgetRequestUncheckedCreateWithoutValidatorInput>
  }

  export type BudgetRequestCreateManyValidatorInputEnvelope = {
    data: BudgetRequestCreateManyValidatorInput | BudgetRequestCreateManyValidatorInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    userName: string
    content: string
    createdAt?: Date | string
    request: BudgetRequestCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    requestId: string
    userName: string
    content: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    userName: string
    action: string
    entity: string
    entityId: string
    details: string
    ipAddress?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    userName: string
    action: string
    entity: string
    entityId: string
    details: string
    ipAddress?: string | null
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutChefInput = {
    id?: string
    name: string
    code: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    requests?: BudgetRequestCreateNestedManyWithoutDeptInput
  }

  export type DepartmentUncheckedCreateWithoutChefInput = {
    id?: string
    name: string
    code: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    requests?: BudgetRequestUncheckedCreateNestedManyWithoutDeptInput
  }

  export type DepartmentCreateOrConnectWithoutChefInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutChefInput, DepartmentUncheckedCreateWithoutChefInput>
  }

  export type DepartmentCreateManyChefInputEnvelope = {
    data: DepartmentCreateManyChefInput | DepartmentCreateManyChefInput[]
    skipDuplicates?: boolean
  }

  export type BudgetRequestUpsertWithWhereUniqueWithoutAgentInput = {
    where: BudgetRequestWhereUniqueInput
    update: XOR<BudgetRequestUpdateWithoutAgentInput, BudgetRequestUncheckedUpdateWithoutAgentInput>
    create: XOR<BudgetRequestCreateWithoutAgentInput, BudgetRequestUncheckedCreateWithoutAgentInput>
  }

  export type BudgetRequestUpdateWithWhereUniqueWithoutAgentInput = {
    where: BudgetRequestWhereUniqueInput
    data: XOR<BudgetRequestUpdateWithoutAgentInput, BudgetRequestUncheckedUpdateWithoutAgentInput>
  }

  export type BudgetRequestUpdateManyWithWhereWithoutAgentInput = {
    where: BudgetRequestScalarWhereInput
    data: XOR<BudgetRequestUpdateManyMutationInput, BudgetRequestUncheckedUpdateManyWithoutAgentInput>
  }

  export type BudgetRequestScalarWhereInput = {
    AND?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
    OR?: BudgetRequestScalarWhereInput[]
    NOT?: BudgetRequestScalarWhereInput | BudgetRequestScalarWhereInput[]
    id?: StringFilter<"BudgetRequest"> | string
    agentId?: StringFilter<"BudgetRequest"> | string
    agentName?: StringFilter<"BudgetRequest"> | string
    department?: StringFilter<"BudgetRequest"> | string
    category?: StringFilter<"BudgetRequest"> | string
    title?: StringFilter<"BudgetRequest"> | string
    description?: StringFilter<"BudgetRequest"> | string
    amount?: FloatFilter<"BudgetRequest"> | number
    justification?: StringFilter<"BudgetRequest"> | string
    accountCode?: StringNullableFilter<"BudgetRequest"> | string | null
    urgency?: EnumUrgencyLevelFilter<"BudgetRequest"> | $Enums.UrgencyLevel
    attachments?: StringNullableListFilter<"BudgetRequest">
    status?: EnumRequestStatusFilter<"BudgetRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"BudgetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BudgetRequest"> | Date | string
    validatedBy?: StringNullableFilter<"BudgetRequest"> | string | null
    validatedAt?: DateTimeNullableFilter<"BudgetRequest"> | Date | string | null
  }

  export type BudgetRequestUpsertWithWhereUniqueWithoutValidatorInput = {
    where: BudgetRequestWhereUniqueInput
    update: XOR<BudgetRequestUpdateWithoutValidatorInput, BudgetRequestUncheckedUpdateWithoutValidatorInput>
    create: XOR<BudgetRequestCreateWithoutValidatorInput, BudgetRequestUncheckedCreateWithoutValidatorInput>
  }

  export type BudgetRequestUpdateWithWhereUniqueWithoutValidatorInput = {
    where: BudgetRequestWhereUniqueInput
    data: XOR<BudgetRequestUpdateWithoutValidatorInput, BudgetRequestUncheckedUpdateWithoutValidatorInput>
  }

  export type BudgetRequestUpdateManyWithWhereWithoutValidatorInput = {
    where: BudgetRequestScalarWhereInput
    data: XOR<BudgetRequestUpdateManyMutationInput, BudgetRequestUncheckedUpdateManyWithoutValidatorInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    requestId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    userName?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    userName?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutChefInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutChefInput, DepartmentUncheckedUpdateWithoutChefInput>
    create: XOR<DepartmentCreateWithoutChefInput, DepartmentUncheckedCreateWithoutChefInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutChefInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutChefInput, DepartmentUncheckedUpdateWithoutChefInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutChefInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutChefInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    chefId?: StringFilter<"Department"> | string
    totalBudget?: FloatFilter<"Department"> | number
    usedBudget?: FloatFilter<"Department"> | number
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type UserCreateWithoutDepartmentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestCreateNestedManyWithoutValidatorInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestUncheckedCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestUncheckedCreateNestedManyWithoutValidatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
  }

  export type BudgetRequestCreateWithoutDeptInput = {
    id?: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    agent: UserCreateNestedOneWithoutBudgetRequestsInput
    validator?: UserCreateNestedOneWithoutValidatedRequestsInput
    comments?: CommentCreateNestedManyWithoutRequestInput
    items?: RequestItemCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUncheckedCreateWithoutDeptInput = {
    id?: string
    agentId: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
    comments?: CommentUncheckedCreateNestedManyWithoutRequestInput
    items?: RequestItemUncheckedCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestCreateOrConnectWithoutDeptInput = {
    where: BudgetRequestWhereUniqueInput
    create: XOR<BudgetRequestCreateWithoutDeptInput, BudgetRequestUncheckedCreateWithoutDeptInput>
  }

  export type BudgetRequestCreateManyDeptInputEnvelope = {
    data: BudgetRequestCreateManyDeptInput | BudgetRequestCreateManyDeptInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDepartmentsInput = {
    update: XOR<UserUpdateWithoutDepartmentsInput, UserUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDepartmentsInput, UserUncheckedUpdateWithoutDepartmentsInput>
  }

  export type UserUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUpdateManyWithoutValidatorNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUncheckedUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUncheckedUpdateManyWithoutValidatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BudgetRequestUpsertWithWhereUniqueWithoutDeptInput = {
    where: BudgetRequestWhereUniqueInput
    update: XOR<BudgetRequestUpdateWithoutDeptInput, BudgetRequestUncheckedUpdateWithoutDeptInput>
    create: XOR<BudgetRequestCreateWithoutDeptInput, BudgetRequestUncheckedCreateWithoutDeptInput>
  }

  export type BudgetRequestUpdateWithWhereUniqueWithoutDeptInput = {
    where: BudgetRequestWhereUniqueInput
    data: XOR<BudgetRequestUpdateWithoutDeptInput, BudgetRequestUncheckedUpdateWithoutDeptInput>
  }

  export type BudgetRequestUpdateManyWithWhereWithoutDeptInput = {
    where: BudgetRequestScalarWhereInput
    data: XOR<BudgetRequestUpdateManyMutationInput, BudgetRequestUncheckedUpdateManyWithoutDeptInput>
  }

  export type UserCreateWithoutBudgetRequestsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    validatedRequests?: BudgetRequestCreateNestedManyWithoutValidatorInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    departments?: DepartmentCreateNestedManyWithoutChefInput
  }

  export type UserUncheckedCreateWithoutBudgetRequestsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    validatedRequests?: BudgetRequestUncheckedCreateNestedManyWithoutValidatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutChefInput
  }

  export type UserCreateOrConnectWithoutBudgetRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBudgetRequestsInput, UserUncheckedCreateWithoutBudgetRequestsInput>
  }

  export type UserCreateWithoutValidatedRequestsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestCreateNestedManyWithoutAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    departments?: DepartmentCreateNestedManyWithoutChefInput
  }

  export type UserUncheckedCreateWithoutValidatedRequestsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestUncheckedCreateNestedManyWithoutAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutChefInput
  }

  export type UserCreateOrConnectWithoutValidatedRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutValidatedRequestsInput, UserUncheckedCreateWithoutValidatedRequestsInput>
  }

  export type DepartmentCreateWithoutRequestsInput = {
    id?: string
    name: string
    code: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chef: UserCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutRequestsInput = {
    id?: string
    name: string
    code: string
    chefId: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateOrConnectWithoutRequestsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutRequestsInput, DepartmentUncheckedCreateWithoutRequestsInput>
  }

  export type CommentCreateWithoutRequestInput = {
    id?: string
    userName: string
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutRequestInput = {
    id?: string
    userId: string
    userName: string
    content: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutRequestInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutRequestInput, CommentUncheckedCreateWithoutRequestInput>
  }

  export type CommentCreateManyRequestInputEnvelope = {
    data: CommentCreateManyRequestInput | CommentCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type RequestItemCreateWithoutRequestInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type RequestItemUncheckedCreateWithoutRequestInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type RequestItemCreateOrConnectWithoutRequestInput = {
    where: RequestItemWhereUniqueInput
    create: XOR<RequestItemCreateWithoutRequestInput, RequestItemUncheckedCreateWithoutRequestInput>
  }

  export type RequestItemCreateManyRequestInputEnvelope = {
    data: RequestItemCreateManyRequestInput | RequestItemCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type BudgetExecutionCreateWithoutRequestInput = {
    id?: string
    supplierId: string
    supplierName: string
    invoiceNumber: string
    invoiceDate: Date | string
    amount: number
    status?: $Enums.ExecutionStatus
    paymentDate?: Date | string | null
    deliveryDate?: Date | string | null
    receivedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetExecutionUncheckedCreateWithoutRequestInput = {
    id?: string
    supplierId: string
    supplierName: string
    invoiceNumber: string
    invoiceDate: Date | string
    amount: number
    status?: $Enums.ExecutionStatus
    paymentDate?: Date | string | null
    deliveryDate?: Date | string | null
    receivedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetExecutionCreateOrConnectWithoutRequestInput = {
    where: BudgetExecutionWhereUniqueInput
    create: XOR<BudgetExecutionCreateWithoutRequestInput, BudgetExecutionUncheckedCreateWithoutRequestInput>
  }

  export type BudgetExecutionCreateManyRequestInputEnvelope = {
    data: BudgetExecutionCreateManyRequestInput | BudgetExecutionCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBudgetRequestsInput = {
    update: XOR<UserUpdateWithoutBudgetRequestsInput, UserUncheckedUpdateWithoutBudgetRequestsInput>
    create: XOR<UserCreateWithoutBudgetRequestsInput, UserUncheckedCreateWithoutBudgetRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBudgetRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBudgetRequestsInput, UserUncheckedUpdateWithoutBudgetRequestsInput>
  }

  export type UserUpdateWithoutBudgetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedRequests?: BudgetRequestUpdateManyWithoutValidatorNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    departments?: DepartmentUpdateManyWithoutChefNestedInput
  }

  export type UserUncheckedUpdateWithoutBudgetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedRequests?: BudgetRequestUncheckedUpdateManyWithoutValidatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutChefNestedInput
  }

  export type UserUpsertWithoutValidatedRequestsInput = {
    update: XOR<UserUpdateWithoutValidatedRequestsInput, UserUncheckedUpdateWithoutValidatedRequestsInput>
    create: XOR<UserCreateWithoutValidatedRequestsInput, UserUncheckedCreateWithoutValidatedRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutValidatedRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutValidatedRequestsInput, UserUncheckedUpdateWithoutValidatedRequestsInput>
  }

  export type UserUpdateWithoutValidatedRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUpdateManyWithoutAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    departments?: DepartmentUpdateManyWithoutChefNestedInput
  }

  export type UserUncheckedUpdateWithoutValidatedRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUncheckedUpdateManyWithoutAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutChefNestedInput
  }

  export type DepartmentUpsertWithoutRequestsInput = {
    update: XOR<DepartmentUpdateWithoutRequestsInput, DepartmentUncheckedUpdateWithoutRequestsInput>
    create: XOR<DepartmentCreateWithoutRequestsInput, DepartmentUncheckedCreateWithoutRequestsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutRequestsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutRequestsInput, DepartmentUncheckedUpdateWithoutRequestsInput>
  }

  export type DepartmentUpdateWithoutRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chef?: UserUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    chefId?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutRequestInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutRequestInput, CommentUncheckedUpdateWithoutRequestInput>
    create: XOR<CommentCreateWithoutRequestInput, CommentUncheckedCreateWithoutRequestInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutRequestInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutRequestInput, CommentUncheckedUpdateWithoutRequestInput>
  }

  export type CommentUpdateManyWithWhereWithoutRequestInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutRequestInput>
  }

  export type RequestItemUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestItemWhereUniqueInput
    update: XOR<RequestItemUpdateWithoutRequestInput, RequestItemUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestItemCreateWithoutRequestInput, RequestItemUncheckedCreateWithoutRequestInput>
  }

  export type RequestItemUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestItemWhereUniqueInput
    data: XOR<RequestItemUpdateWithoutRequestInput, RequestItemUncheckedUpdateWithoutRequestInput>
  }

  export type RequestItemUpdateManyWithWhereWithoutRequestInput = {
    where: RequestItemScalarWhereInput
    data: XOR<RequestItemUpdateManyMutationInput, RequestItemUncheckedUpdateManyWithoutRequestInput>
  }

  export type RequestItemScalarWhereInput = {
    AND?: RequestItemScalarWhereInput | RequestItemScalarWhereInput[]
    OR?: RequestItemScalarWhereInput[]
    NOT?: RequestItemScalarWhereInput | RequestItemScalarWhereInput[]
    id?: StringFilter<"RequestItem"> | string
    requestId?: StringFilter<"RequestItem"> | string
    description?: StringFilter<"RequestItem"> | string
    quantity?: IntFilter<"RequestItem"> | number
    unitPrice?: FloatFilter<"RequestItem"> | number
    totalPrice?: FloatFilter<"RequestItem"> | number
    createdAt?: DateTimeFilter<"RequestItem"> | Date | string
  }

  export type BudgetExecutionUpsertWithWhereUniqueWithoutRequestInput = {
    where: BudgetExecutionWhereUniqueInput
    update: XOR<BudgetExecutionUpdateWithoutRequestInput, BudgetExecutionUncheckedUpdateWithoutRequestInput>
    create: XOR<BudgetExecutionCreateWithoutRequestInput, BudgetExecutionUncheckedCreateWithoutRequestInput>
  }

  export type BudgetExecutionUpdateWithWhereUniqueWithoutRequestInput = {
    where: BudgetExecutionWhereUniqueInput
    data: XOR<BudgetExecutionUpdateWithoutRequestInput, BudgetExecutionUncheckedUpdateWithoutRequestInput>
  }

  export type BudgetExecutionUpdateManyWithWhereWithoutRequestInput = {
    where: BudgetExecutionScalarWhereInput
    data: XOR<BudgetExecutionUpdateManyMutationInput, BudgetExecutionUncheckedUpdateManyWithoutRequestInput>
  }

  export type BudgetExecutionScalarWhereInput = {
    AND?: BudgetExecutionScalarWhereInput | BudgetExecutionScalarWhereInput[]
    OR?: BudgetExecutionScalarWhereInput[]
    NOT?: BudgetExecutionScalarWhereInput | BudgetExecutionScalarWhereInput[]
    id?: StringFilter<"BudgetExecution"> | string
    requestId?: StringFilter<"BudgetExecution"> | string
    supplierId?: StringFilter<"BudgetExecution"> | string
    supplierName?: StringFilter<"BudgetExecution"> | string
    invoiceNumber?: StringFilter<"BudgetExecution"> | string
    invoiceDate?: DateTimeFilter<"BudgetExecution"> | Date | string
    amount?: FloatFilter<"BudgetExecution"> | number
    status?: EnumExecutionStatusFilter<"BudgetExecution"> | $Enums.ExecutionStatus
    paymentDate?: DateTimeNullableFilter<"BudgetExecution"> | Date | string | null
    deliveryDate?: DateTimeNullableFilter<"BudgetExecution"> | Date | string | null
    receivedBy?: StringNullableFilter<"BudgetExecution"> | string | null
    createdAt?: DateTimeFilter<"BudgetExecution"> | Date | string
    updatedAt?: DateTimeFilter<"BudgetExecution"> | Date | string
  }

  export type BudgetRequestCreateWithoutItemsInput = {
    id?: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    agent: UserCreateNestedOneWithoutBudgetRequestsInput
    validator?: UserCreateNestedOneWithoutValidatedRequestsInput
    dept?: DepartmentCreateNestedOneWithoutRequestsInput
    comments?: CommentCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUncheckedCreateWithoutItemsInput = {
    id?: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
    comments?: CommentUncheckedCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestCreateOrConnectWithoutItemsInput = {
    where: BudgetRequestWhereUniqueInput
    create: XOR<BudgetRequestCreateWithoutItemsInput, BudgetRequestUncheckedCreateWithoutItemsInput>
  }

  export type BudgetRequestUpsertWithoutItemsInput = {
    update: XOR<BudgetRequestUpdateWithoutItemsInput, BudgetRequestUncheckedUpdateWithoutItemsInput>
    create: XOR<BudgetRequestCreateWithoutItemsInput, BudgetRequestUncheckedCreateWithoutItemsInput>
    where?: BudgetRequestWhereInput
  }

  export type BudgetRequestUpdateToOneWithWhereWithoutItemsInput = {
    where?: BudgetRequestWhereInput
    data: XOR<BudgetRequestUpdateWithoutItemsInput, BudgetRequestUncheckedUpdateWithoutItemsInput>
  }

  export type BudgetRequestUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: UserUpdateOneRequiredWithoutBudgetRequestsNestedInput
    validator?: UserUpdateOneWithoutValidatedRequestsNestedInput
    dept?: DepartmentUpdateOneWithoutRequestsNestedInput
    comments?: CommentUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: CommentUncheckedUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestCreateWithoutCommentsInput = {
    id?: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    agent: UserCreateNestedOneWithoutBudgetRequestsInput
    validator?: UserCreateNestedOneWithoutValidatedRequestsInput
    dept?: DepartmentCreateNestedOneWithoutRequestsInput
    items?: RequestItemCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUncheckedCreateWithoutCommentsInput = {
    id?: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
    items?: RequestItemUncheckedCreateNestedManyWithoutRequestInput
    executions?: BudgetExecutionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestCreateOrConnectWithoutCommentsInput = {
    where: BudgetRequestWhereUniqueInput
    create: XOR<BudgetRequestCreateWithoutCommentsInput, BudgetRequestUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestCreateNestedManyWithoutValidatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    departments?: DepartmentCreateNestedManyWithoutChefInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestUncheckedCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestUncheckedCreateNestedManyWithoutValidatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutChefInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type BudgetRequestUpsertWithoutCommentsInput = {
    update: XOR<BudgetRequestUpdateWithoutCommentsInput, BudgetRequestUncheckedUpdateWithoutCommentsInput>
    create: XOR<BudgetRequestCreateWithoutCommentsInput, BudgetRequestUncheckedCreateWithoutCommentsInput>
    where?: BudgetRequestWhereInput
  }

  export type BudgetRequestUpdateToOneWithWhereWithoutCommentsInput = {
    where?: BudgetRequestWhereInput
    data: XOR<BudgetRequestUpdateWithoutCommentsInput, BudgetRequestUncheckedUpdateWithoutCommentsInput>
  }

  export type BudgetRequestUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: UserUpdateOneRequiredWithoutBudgetRequestsNestedInput
    validator?: UserUpdateOneWithoutValidatedRequestsNestedInput
    dept?: DepartmentUpdateOneWithoutRequestsNestedInput
    items?: RequestItemUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: RequestItemUncheckedUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUpdateManyWithoutValidatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    departments?: DepartmentUpdateManyWithoutChefNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUncheckedUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUncheckedUpdateManyWithoutValidatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutChefNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestCreateNestedManyWithoutValidatorInput
    comments?: CommentCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    departments?: DepartmentCreateNestedManyWithoutChefInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestUncheckedCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestUncheckedCreateNestedManyWithoutValidatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutChefInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUpdateManyWithoutValidatorNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    departments?: DepartmentUpdateManyWithoutChefNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUncheckedUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUncheckedUpdateManyWithoutValidatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutChefNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestCreateNestedManyWithoutValidatorInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    departments?: DepartmentCreateNestedManyWithoutChefInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    budgetRequests?: BudgetRequestUncheckedCreateNestedManyWithoutAgentInput
    validatedRequests?: BudgetRequestUncheckedCreateNestedManyWithoutValidatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutChefInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUpdateManyWithoutValidatorNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    departments?: DepartmentUpdateManyWithoutChefNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgetRequests?: BudgetRequestUncheckedUpdateManyWithoutAgentNestedInput
    validatedRequests?: BudgetRequestUncheckedUpdateManyWithoutValidatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutChefNestedInput
  }

  export type BudgetRequestCreateWithoutExecutionsInput = {
    id?: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
    agent: UserCreateNestedOneWithoutBudgetRequestsInput
    validator?: UserCreateNestedOneWithoutValidatedRequestsInput
    dept?: DepartmentCreateNestedOneWithoutRequestsInput
    comments?: CommentCreateNestedManyWithoutRequestInput
    items?: RequestItemCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestUncheckedCreateWithoutExecutionsInput = {
    id?: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
    comments?: CommentUncheckedCreateNestedManyWithoutRequestInput
    items?: RequestItemUncheckedCreateNestedManyWithoutRequestInput
  }

  export type BudgetRequestCreateOrConnectWithoutExecutionsInput = {
    where: BudgetRequestWhereUniqueInput
    create: XOR<BudgetRequestCreateWithoutExecutionsInput, BudgetRequestUncheckedCreateWithoutExecutionsInput>
  }

  export type BudgetRequestUpsertWithoutExecutionsInput = {
    update: XOR<BudgetRequestUpdateWithoutExecutionsInput, BudgetRequestUncheckedUpdateWithoutExecutionsInput>
    create: XOR<BudgetRequestCreateWithoutExecutionsInput, BudgetRequestUncheckedCreateWithoutExecutionsInput>
    where?: BudgetRequestWhereInput
  }

  export type BudgetRequestUpdateToOneWithWhereWithoutExecutionsInput = {
    where?: BudgetRequestWhereInput
    data: XOR<BudgetRequestUpdateWithoutExecutionsInput, BudgetRequestUncheckedUpdateWithoutExecutionsInput>
  }

  export type BudgetRequestUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: UserUpdateOneRequiredWithoutBudgetRequestsNestedInput
    validator?: UserUpdateOneWithoutValidatedRequestsNestedInput
    dept?: DepartmentUpdateOneWithoutRequestsNestedInput
    comments?: CommentUpdateManyWithoutRequestNestedInput
    items?: RequestItemUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: CommentUncheckedUpdateManyWithoutRequestNestedInput
    items?: RequestItemUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestCreateManyAgentInput = {
    id?: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
  }

  export type BudgetRequestCreateManyValidatorInput = {
    id?: string
    agentId: string
    agentName: string
    department: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedAt?: Date | string | null
  }

  export type CommentCreateManyUserInput = {
    id?: string
    requestId: string
    userName: string
    content: string
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    userName: string
    action: string
    entity: string
    entityId: string
    details: string
    ipAddress?: string | null
    timestamp?: Date | string
  }

  export type DepartmentCreateManyChefInput = {
    id?: string
    name: string
    code: string
    totalBudget?: number
    usedBudget?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetRequestUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validator?: UserUpdateOneWithoutValidatedRequestsNestedInput
    dept?: DepartmentUpdateOneWithoutRequestsNestedInput
    comments?: CommentUpdateManyWithoutRequestNestedInput
    items?: RequestItemUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: CommentUncheckedUpdateManyWithoutRequestNestedInput
    items?: RequestItemUncheckedUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BudgetRequestUpdateWithoutValidatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: UserUpdateOneRequiredWithoutBudgetRequestsNestedInput
    dept?: DepartmentUpdateOneWithoutRequestsNestedInput
    comments?: CommentUpdateManyWithoutRequestNestedInput
    items?: RequestItemUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateWithoutValidatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: CommentUncheckedUpdateManyWithoutRequestNestedInput
    items?: RequestItemUncheckedUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateManyWithoutValidatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: BudgetRequestUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutChefInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requests?: BudgetRequestUpdateManyWithoutDeptNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutChefInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requests?: BudgetRequestUncheckedUpdateManyWithoutDeptNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutChefInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    totalBudget?: FloatFieldUpdateOperationsInput | number
    usedBudget?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetRequestCreateManyDeptInput = {
    id?: string
    agentId: string
    agentName: string
    category: string
    title: string
    description: string
    amount: number
    justification: string
    accountCode?: string | null
    urgency: $Enums.UrgencyLevel
    attachments?: BudgetRequestCreateattachmentsInput | string[]
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    validatedBy?: string | null
    validatedAt?: Date | string | null
  }

  export type BudgetRequestUpdateWithoutDeptInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: UserUpdateOneRequiredWithoutBudgetRequestsNestedInput
    validator?: UserUpdateOneWithoutValidatedRequestsNestedInput
    comments?: CommentUpdateManyWithoutRequestNestedInput
    items?: RequestItemUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateWithoutDeptInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: CommentUncheckedUpdateManyWithoutRequestNestedInput
    items?: RequestItemUncheckedUpdateManyWithoutRequestNestedInput
    executions?: BudgetExecutionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type BudgetRequestUncheckedUpdateManyWithoutDeptInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    agentName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    justification?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumUrgencyLevelFieldUpdateOperationsInput | $Enums.UrgencyLevel
    attachments?: BudgetRequestUpdateattachmentsInput | string[]
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CommentCreateManyRequestInput = {
    id?: string
    userId: string
    userName: string
    content: string
    createdAt?: Date | string
  }

  export type RequestItemCreateManyRequestInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type BudgetExecutionCreateManyRequestInput = {
    id?: string
    supplierId: string
    supplierName: string
    invoiceNumber: string
    invoiceDate: Date | string
    amount: number
    status?: $Enums.ExecutionStatus
    paymentDate?: Date | string | null
    deliveryDate?: Date | string | null
    receivedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestItemUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestItemUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestItemUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetExecutionUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    supplierName?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumExecutionStatusFieldUpdateOperationsInput | $Enums.ExecutionStatus
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetExecutionUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    supplierName?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumExecutionStatusFieldUpdateOperationsInput | $Enums.ExecutionStatus
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetExecutionUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    supplierName?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumExecutionStatusFieldUpdateOperationsInput | $Enums.ExecutionStatus
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BudgetRequestCountOutputTypeDefaultArgs instead
     */
    export type BudgetRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BudgetRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BudgetRequestDefaultArgs instead
     */
    export type BudgetRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BudgetRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestItemDefaultArgs instead
     */
    export type RequestItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BudgetExecutionDefaultArgs instead
     */
    export type BudgetExecutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BudgetExecutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OhadaAccountDefaultArgs instead
     */
    export type OhadaAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OhadaAccountDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}